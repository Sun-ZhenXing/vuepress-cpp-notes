import{_ as i,M as c,p as u,q as r,R as n,N as s,V as t,t as a,a1 as e}from"./framework-5f7e94ef.js";const k="/vuepress-cpp-notes/assets/virtual-function-c4186651.svg",d="/vuepress-cpp-notes/assets/link-7cd87b35.svg",v="/vuepress-cpp-notes/assets/link-with-template-379ec21a.svg",m="/vuepress-cpp-notes/assets/strong-ref-8fcb30b5.svg",b="/vuepress-cpp-notes/assets/weak-ref-3f0ff821.svg",y="/vuepress-cpp-notes/assets/crack-exe-with-shell-ed722a23.svg",g={},h=n("h1",{id:"c-课程学习笔记-下",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-课程学习笔记-下","aria-hidden":"true"},"#"),a(" C++ 课程学习笔记（下）")],-1),_=n("p",null,"本文是 C++ 学习笔记，结合 C++11 底层和特征讲解，并包含实战。全课程一共 16 章，这里讲解 9~16 章的内容。",-1),w={class:"table-of-contents"},f=e(`<h2 id="_9-面向对象-d" tabindex="-1"><a class="header-anchor" href="#_9-面向对象-d" aria-hidden="true">#</a> 9. 面向对象 D</h2><h3 id="_9-1-多态-8-虚析构函数" tabindex="-1"><a class="header-anchor" href="#_9-1-多态-8-虚析构函数" aria-hidden="true">#</a> 9.1 多态 8：虚析构函数</h3><p>我们先测试如下代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Animal::Animal()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Animal::~Animal()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">Cat</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Animal</span></span> <span class="token punctuation">{</span>
    <span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Cat::Cat()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Cat::~Cat()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用的时候，不会调用 <code>~Cat()</code>。为了调用子类的析构函数，使用 <strong>虚析构函数</strong> <code>virtual ~Animal()</code>。</p><h3 id="_9-2-多态-9-纯虚函数、抽象类" tabindex="-1"><a class="header-anchor" href="#_9-2-多态-9-纯虚函数、抽象类" aria-hidden="true">#</a> 9.2 多态 9：纯虚函数、抽象类</h3><p>没有函数体，且初始化为 <code>0</code> 的虚函数是 <strong>纯虚函数</strong>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">struct</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><strong>抽象类</strong>（Abstract Class）是含有纯虚函数的类，不可以实例化（不可以创建对象）：</p><ul><li>抽象类也可以包含非纯虚函数、成员变量</li><li>如果父类是抽象类，子类没有完全重写纯虚函数，那么这个子类依然是抽象类</li></ul><h3 id="_9-3-多继承-1" tabindex="-1"><a class="header-anchor" href="#_9-3-多继承-1" aria-hidden="true">#</a> 9.3 多继承 1</h3><p>C++ 允许一个类可以有多个父类，<strong>不建议使用</strong>，会增加程序设计复杂度。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_score<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> score<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_score <span class="token operator">=</span> score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Worker</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_salary<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Worker</span><span class="token punctuation">(</span><span class="token keyword">int</span> salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Undergraduate</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">Worker</span></span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> m_grade<span class="token punctuation">;</span>
    <span class="token function">Undergraduate</span><span class="token punctuation">(</span><span class="token keyword">int</span> score<span class="token punctuation">,</span> <span class="token keyword">int</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> grade<span class="token punctuation">)</span>
        <span class="token operator">:</span><span class="token function">m_grade</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Student</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Worker</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果子类继承的多个父类都有虚函数，那么子类对象就会产生对应的多张虚表。</p><p><img src="`+k+`" alt="虚函数" loading="lazy"></p><p>如果父类与子类包含同名函数或变量，可以加上类名：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>Undergraduate ug<span class="token punctuation">;</span>
ug<span class="token punctuation">.</span>m_age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
ug<span class="token punctuation">.</span>Student<span class="token double-colon punctuation">::</span>m_age <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
ug<span class="token punctuation">.</span>Worker<span class="token double-colon punctuation">::</span>m_age <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_9-4-多继承-2-菱形继承" tabindex="-1"><a class="header-anchor" href="#_9-4-多继承-2-菱形继承" aria-hidden="true">#</a> 9.4 多继承 2：菱形继承</h3>`,18),x=e(`<p>如果类 <code>A</code> 有一个成员变量 <code>m_age</code>，那么 <code>B</code> 和 <code>C</code> 也包含成员变量 <code>m_age</code>，类 <code>X</code> 就会出现两个 <code>m_age</code></p><p>菱形继承带来的问题：</p><ul><li>最底下子类从基类继承的成员变量冗余、重复</li><li>最底下子类无法访问基类的成员，有二义性</li></ul><p>如果需要解决这个问题，使用 <strong>虚继承</strong>。</p><h3 id="_9-5-多继承-3-虚继承" tabindex="-1"><a class="header-anchor" href="#_9-5-多继承-3-虚继承" aria-hidden="true">#</a> 9.5 多继承 3：虚继承</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_age<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">Person</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_score<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Worker</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">virtual</span> <span class="token class-name">Person</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_salary<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Undergraduate</span><span class="token operator">:</span> <span class="token base-clause"><span class="token class-name">Student</span><span class="token punctuation">,</span> <span class="token class-name">Worker</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_grade<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Student</code> 类的内存布局：</p><ol><li>虚表指针</li><li><code>m_score</code></li><li><code>m_age</code></li></ol><ul><li>虚表里面第一个是虚表指针与本类起始的偏移量，一般都是 <code>0</code></li><li>第二个值是虚基类第一个成员变量与本类起始的偏移量</li></ul><p><code>Undergraduate</code> 类的内存布局：</p><ol><li>虚表指针</li><li><code>m_salary</code></li><li>虚表指针</li><li><code>m_grade</code></li><li><code>m_age</code></li></ol><h3 id="_9-6-多继承-4-应用" tabindex="-1"><a class="header-anchor" href="#_9-6-多继承-4-应用" aria-hidden="true">#</a> 9.6 多继承 4：应用</h3><p>C++ 的多继承机制复杂，容易增加项目复杂度，不建议大量使用。</p><p>父类定义接口规范，包含纯虚函数，如果子类可以实现，那么子类可以继承多个类，此时是合理的。</p><h3 id="_9-7-static-1-成员变量" tabindex="-1"><a class="header-anchor" href="#_9-7-static-1-成员变量" aria-hidden="true">#</a> 9.7 <code>static</code> 1：成员变量</h3><p><strong>静态成员</strong> 是被 <code>static</code> 修饰的成员变量或函数。</p><p>访问方式：</p><ul><li>通过对象（<code>obj.static_member</code>）</li><li>通过对象指针（<code>obj-&gt;static_member</code>）</li><li>通过类（<code>cls::static_member</code>）</li></ul><p>静态变量只有一份，存储在数据段（全局区，类似于全局变量），整个程序运行过程中只有一份内存。</p><p>对比全局变量，它可以设定访问权限（<code>public</code>、<code>protected</code>、<code>private</code>），达到局部共享的目的。</p><p>静态成员变量必须初始化，但是放到类的外部初始化：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> Car<span class="token double-colon punctuation">::</span>m_price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre></div><p>如果声明和实现分离的，那么初始化只能放在实现里面，且实现部分不能被 <code>static</code> 修饰。</p><h3 id="_9-8-static-2-成员函数" tabindex="-1"><a class="header-anchor" href="#_9-8-static-2-成员函数" aria-hidden="true">#</a> 9.8 <code>static</code> 2：成员函数</h3><p>静态成员函数：</p><ul><li>内部不能使用 <code>this</code> 指针</li><li>不能是虚函数</li><li>内部只能访问静态成员变量或函数</li><li>构造函数、析构函数不能是静态</li><li>当声明和实现分离时，实现部分不能被 <code>static</code> 修饰</li></ul><h3 id="_9-9-static-3-汇编分析" tabindex="-1"><a class="header-anchor" href="#_9-9-static-3-汇编分析" aria-hidden="true">#</a> 9.9 <code>static</code> 3：汇编分析</h3><p>静态成员变量被继承的时候也只有一份。</p><h3 id="_9-10-static-4-应用" tabindex="-1"><a class="header-anchor" href="#_9-10-static-4-应用" aria-hidden="true">#</a> 9.10 <code>static</code> 4：应用</h3><p>例如，统计当前已经有多少个对象实例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> ms_count<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意多线程安全</span>
        ms_count<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意多线程安全</span>
        ms_count<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ms_count<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> Car<span class="token double-colon punctuation">::</span>ms_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_10-面向对象-e" tabindex="-1"><a class="header-anchor" href="#_10-面向对象-e" aria-hidden="true">#</a> 10. 面向对象 E</h2><h3 id="_10-1-static-5-单例模式" tabindex="-1"><a class="header-anchor" href="#_10-1-static-5-单例模式" aria-hidden="true">#</a> 10.1 <code>static</code> 5：单例模式</h3><div class="hint-container tip"><p class="hint-container-title">单例模式</p><p>静态成员经典应用 —— 单例模式。</p></div><p>单例模式是 <strong>设计模式</strong>（Design Pattern）的一种，保证某个类只创建一个对象。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Rocket</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token function">Rocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Rocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">static</span> Rocket <span class="token operator">*</span>ms_rocket<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Rocket <span class="token operator">*</span><span class="token function">sharedRocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意多线程安全</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ms_rocket <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ms_rocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Rocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ms_rocket<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteRocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意多线程安全</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ms_rocket <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">delete</span> ms_rocket<span class="token punctuation">;</span>
            ms_rocket <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-2-new、delete-的误区" tabindex="-1"><a class="header-anchor" href="#_10-2-new、delete-的误区" aria-hidden="true">#</a> 10.2 <code>new</code>、<code>delete</code> 的误区</h3><ul><li><code>new</code> 不会将申请的空间清空原有数据</li><li><code>delete</code> 也不会清空已经使用的数据</li></ul><h3 id="_10-3-const-成员、引用成员" tabindex="-1"><a class="header-anchor" href="#_10-3-const-成员、引用成员" aria-hidden="true">#</a> 10.3 <code>const</code> 成员、引用成员</h3><p><code>const</code> 成员是被 <code>const</code> 修饰的成员变量或非静态成员函数。</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Car::run()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><code>const</code> 成员变量：</p><ul><li>必须初始化，在类内部初始化，可以在声明的时候直接初始化赋值</li><li>非 <code>static</code> 的 <code>const</code> 成员变量还可以在初始化列表中初始化</li></ul><p><code>const</code> 成员函数：</p><ul><li>内部不能修改非 <code>static</code> 成员变量</li><li>内部只能调用 <code>const</code> 成员函数、<code>static</code> 成员函数</li><li>被修饰的函数必须是非静态的</li><li><code>const</code> 关键字写在参数列表后面，函数的声明和实现都必须带 <code>const</code></li><li>非 <code>const</code> 成员函数可以调用 <code>const</code> 成员函数</li><li><code>const</code> 成员函数和非 <code>const</code> 成员函数构成重载 <ul><li>非 <code>const</code> 对象（指针）优先调用非 <code>const</code> 成员函数</li><li><code>const</code> 对象（指针）只能调用 <code>const</code> 成员函数、static 成员函数</li></ul></li></ul><p>引用类型成员变量必须初始化（不考虑 <code>static</code> 情况）</p><ul><li>在声明的时候直接初始化</li><li>通过初始化列表初始化</li></ul><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">&amp;</span>m_price <span class="token operator">=</span> age<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>price<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_10-4-拷贝构造-1" tabindex="-1"><a class="header-anchor" href="#_10-4-拷贝构造-1" aria-hidden="true">#</a> 10.4 拷贝构造 1</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_length<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> length<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_length</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Car()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;price=&quot;</span> <span class="token operator">&lt;&lt;</span> m_price <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, m_length=&quot;</span> <span class="token operator">&lt;&lt;</span> m_length <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>拷贝构造函数</strong>（Copy Constructor）：</p><ul><li>拷贝构造函数是构造函数的一种</li><li>当利用已存在的对象创建一个新对象时（类似于拷贝），就会调用新对象的拷贝构造函数进行初始化</li><li>拷贝构造函数的格式是固定的，接收一个 <code>const</code> 引用作为参数</li></ul><p>例如：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>Car <span class="token function">car1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Car <span class="token function">car2</span><span class="token punctuation">(</span>car1<span class="token punctuation">)</span><span class="token punctuation">;</span>
car1<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
car2<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>不写拷贝构造函数是没有拷贝构造函数的，但是存在拷贝构造的行为。默认的拷贝构造行为是复制对象的数据。</p><p>拷贝构造函数写法：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">Car</span><span class="token double-colon punctuation">::</span><span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">const</span> Car <span class="token operator">&amp;</span>car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 内容</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_10-5-拷贝构造-2-父类" tabindex="-1"><a class="header-anchor" href="#_10-5-拷贝构造-2-父类" aria-hidden="true">#</a> 10.5 拷贝构造 2：父类</h3><p>继承体系的拷贝构造：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_age<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_age</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>m_age<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Person</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_score<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> score<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_score</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student <span class="token operator">&amp;</span>student<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Person</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_score</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>m_score<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果需求仅仅是复制所有的成员变量，那么不需要拷贝构造函数。</p><h3 id="_10-6-拷贝构造-3-注意点" tabindex="-1"><a class="header-anchor" href="#_10-6-拷贝构造-3-注意点" aria-hidden="true">#</a> 10.6 拷贝构造 3：注意点</h3><p>使用 10.4 的代码，思考下面的代码：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 默认构造函数</span>
Car <span class="token function">car1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 拷贝构造</span>
Car <span class="token function">car2</span><span class="token punctuation">(</span>car1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 拷贝构造</span>
Car car3 <span class="token operator">=</span> car2<span class="token punctuation">;</span>
<span class="token comment">// 默认构造函数</span>
Car car4<span class="token punctuation">;</span>
<span class="token comment">// 复制对象</span>
car4 <span class="token operator">=</span> car3<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-7-拷贝构造-4-疑点" tabindex="-1"><a class="header-anchor" href="#_10-7-拷贝构造-4-疑点" aria-hidden="true">#</a> 10.7 拷贝构造 4：疑点</h3><p>子类的构造函数默认会调用父类无参的构造函数。如果已经构造了父类的构造函数，就不会再去调用父类的构造函数。</p><h3 id="_10-8-拷贝构造-5-浅拷贝" tabindex="-1"><a class="header-anchor" href="#_10-8-拷贝构造-5-浅拷贝" aria-hidden="true">#</a> 10.8 拷贝构造 5：浅拷贝</h3><p>编译器默认的提供的拷贝是 <strong>浅拷贝</strong>（Shallow Copy）</p><ul><li>将一个对象中所有成员变量的值拷贝到另一个对象</li><li>如果某个成员变量是个指针，只会拷贝指针中存储的地址值，并不会拷贝指针指向的内存空间</li><li>可能会导致堆空间多次 <code>free()</code> 的问题</li></ul><p>如果需要实现 <strong>深拷贝</strong>（Deep Copy），就需要自定义拷贝构造函数</p><ul><li>将指针类型的成员变量所指向的内存空间，拷贝到新的内存空间</li></ul><p>如复制 C 风格字符串需求：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 下面是 C 风格字符串</span>
<span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name1 <span class="token operator">=</span> <span class="token string">&quot;def&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> name2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;d&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;e&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;f&#39;</span><span class="token punctuation">,</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>如果类中存在 C 风格字符串，可能需要定义拷贝构造函数。</p><div class="hint-container warning"><p class="hint-container-title">拷贝构造</p><p>如果不定义拷贝构造函数，可能存在堆空间指针指向栈空间的危险行为！</p></div><h3 id="_10-9-拷贝构造-6-深拷贝-1" tabindex="-1"><a class="header-anchor" href="#_10-9-拷贝构造-6-深拷贝-1" aria-hidden="true">#</a> 10.9 拷贝构造 6：深拷贝 1</h3><p>初始化：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>m_name<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        m_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m_name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> m_name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-10-拷贝构造-7-深拷贝-2" tabindex="-1"><a class="header-anchor" href="#_10-10-拷贝构造-7-深拷贝-2" aria-hidden="true">#</a> 10.10 拷贝构造 7：深拷贝 2</h3><p>拷贝构造实现的示例：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token class-name">Car</span><span class="token double-colon punctuation">::</span><span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">const</span> Car<span class="token operator">&amp;</span> car<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>m_price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>m_name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    m_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_name<span class="token punctuation">,</span> car<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>完整的示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
    <span class="token keyword">char</span> <span class="token operator">*</span>m_name<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">_copyName</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        m_name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_name<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_copyName</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">const</span> Car<span class="token operator">&amp;</span> car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_copyName</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>m_name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m_name <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> m_name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_11-面向对象-f" tabindex="-1"><a class="header-anchor" href="#_11-面向对象-f" aria-hidden="true">#</a> 11. 面向对象 F</h2><h3 id="_11-1-拷贝构造-8-总结" tabindex="-1"><a class="header-anchor" href="#_11-1-拷贝构造-8-总结" aria-hidden="true">#</a> 11.1 拷贝构造 8：总结</h3><p>需要深拷贝的时候需要实现拷贝构造函数。</p><h3 id="_11-2-对象类型的参数和返回值" tabindex="-1"><a class="header-anchor" href="#_11-2-对象类型的参数和返回值" aria-hidden="true">#</a> 11.2 对象类型的参数和返回值</h3><p>使用对象类型作为函数的参数或者返回值，可能会产生一些不必要的中间对象：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>Car car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 会调用一次拷贝构造函数</span>
<span class="token punctuation">}</span>
</code></pre></div><p>更好的策略：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>Car <span class="token operator">&amp;</span>car<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token keyword">const</span> Car <span class="token operator">&amp;</span>car<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span>Car <span class="token operator">*</span>car<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
</code></pre></div><p>返回值如果作为返回值时，也会产生中间对象：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>Car <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Car <span class="token function">car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> car<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 产生一次拷贝构造</span>
    <span class="token comment">// ...test();</span>
    <span class="token comment">// 产生两次拷贝构造，编译器优化后是一次拷贝构造</span>
    Car car1 <span class="token operator">=</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-3-匿名对象-临时对象" tabindex="-1"><a class="header-anchor" href="#_11-3-匿名对象-临时对象" aria-hidden="true">#</a> 11.3 匿名对象（临时对象）</h3><p><strong>匿名对象</strong> 没有变量名、没有被指针指向的对象，用完后马上调用析构。</p><p>下面的对象是匿名对象</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>匿名对象作为函数参数会被优化，不会产生两次构造。</p><h3 id="_11-4-隐式构造、explicit" tabindex="-1"><a class="header-anchor" href="#_11-4-隐式构造、explicit" aria-hidden="true">#</a> 11.4 隐式构造、<code>explicit</code></h3><p>下面的几种情况会产生 <strong>隐式构造</strong>，或叫 <strong>转换构造</strong>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">const</span> Car <span class="token operator">&amp;</span>car<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>m_price<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 情况 1</span>
<span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span>Car car<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
Car <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token number">70</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Car car1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token function">test1</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Car <span class="token function">car2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    car2 <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>
    Car car3 <span class="token operator">=</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用关键字 <code>explicit</code> 禁止隐式构造：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">explicit</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">const</span> Car <span class="token operator">&amp;</span>car<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>car<span class="token punctuation">.</span>m_price<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_11-5-编译器自动生成的构造函数" tabindex="-1"><a class="header-anchor" href="#_11-5-编译器自动生成的构造函数" aria-hidden="true">#</a> 11.5 编译器自动生成的构造函数</h3><p>C++ 的编译器在某些特定的情况下，会给类自动生成无参的构造函数，比如</p><ul><li>成员变量在声明的同时进行了初始化</li><li>有定义虚函数</li><li>虚继承了其他类</li><li>包含了对象类型的成员，且这个成员有构造函数（编译器生成或自定义）</li><li>父类有构造函数（编译器生成或自定义）</li></ul><div class="hint-container info"><p class="hint-container-title">总结</p><p>对象创建后，需要做一些额外操作时（比如内存操作、函数调用），编译器一般都会为其自动生成无参的构造函数</p></div><h3 id="_11-6-友元" tabindex="-1"><a class="header-anchor" href="#_11-6-友元" aria-hidden="true">#</a> 11.6 友元</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_y<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_y<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">&lt;&lt;</span> m_x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> m_y <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;)&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Point <span class="token function">add</span><span class="token punctuation">(</span>Point p1<span class="token punctuation">,</span> Point p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p1<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> p2<span class="token punctuation">.</span><span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <strong>友元函数</strong>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">friend</span> Point <span class="token function">add</span><span class="token punctuation">(</span>Point p1<span class="token punctuation">,</span> Point p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_y<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_x<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">getY</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> m_y<span class="token punctuation">;</span> <span class="token punctuation">}</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">&lt;&lt;</span> m_x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> m_y <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;)&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
Point <span class="token function">add</span><span class="token punctuation">(</span>Point p1<span class="token punctuation">,</span> Point p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_x <span class="token operator">+</span> p2<span class="token punctuation">.</span>m_x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>m_y <span class="token operator">+</span> p2<span class="token punctuation">.</span>m_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>友元包括友元函数和友元类</li><li>如果将函数 <code>A()</code>（非成员函数）声明为类 <code>C</code> 的友元函数，那么函数 <code>A()</code>就能直接访问类 <code>C</code> 对象的所有成员</li><li>如果将类 <code>A</code> 声明为类 <code>C</code> 的友元类，那么类 <code>A</code> 的所有成员函数都能直接访问类 <code>C</code> 对象的所有成员</li><li>友元破坏了面向对象的封装性，但在某些频繁访问成员变量的地方可以提高性能</li></ul><p>友元类使用方法 <code>friend class ClassName;</code>。</p><h3 id="_11-7-内部类" tabindex="-1"><a class="header-anchor" href="#_11-7-内部类" aria-hidden="true">#</a> 11.7 内部类</h3><p>如果将类 <code>A</code> 定义在类 <code>C</code> 的内部，那么类 <code>A</code> 就是一个 <strong>内部类</strong>（<strong>嵌套类</strong>）：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
        <span class="token comment">// 内部类</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>内部类的特点：</p><ul><li>支持 <code>public, protected, private</code> 权限</li><li>成员函数可以直接访问其外部类对象的所有成员（反过来则不行）</li><li>成员函数可以直接不带类名、对象名访问其外部类的 <code>static</code> 成员</li><li>不会影响外部类的内存布局</li><li>可以在外部类内部声明，在外部类外面进行定义</li></ul><p>内部类与外部类唯一不同的就是访问权限。</p><p>声明和实现分离：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Math</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Point</span><span class="token operator">:</span><span class="token base-clause"><span class="token operator">:</span><span class="token class-name">Math</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// ...实现...</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_11-8-局部类" tabindex="-1"><a class="header-anchor" href="#_11-8-局部类" aria-hidden="true">#</a> 11.8 局部类</h3><p>在一个函数内部定义的类，称为 <strong>局部类</strong>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span><span class="token operator">:</span>
        <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>局部类的特点：</p><ul><li>作用域仅限于所在的函数内部</li><li>其所有的成员必须定义在类内部，不允许定义 <code>static</code> 成员变量</li><li>成员函数不能直接访问函数的局部变量（<code>static</code> 变量除外）</li></ul><p>局部类与外部的类也只是访问权限的区别。</p><h2 id="_12-其他语法-a" tabindex="-1"><a class="header-anchor" href="#_12-其他语法-a" aria-hidden="true">#</a> 12. 其他语法 A</h2><h3 id="_12-1-运算符重载-1" tabindex="-1"><a class="header-anchor" href="#_12-1-运算符重载-1" aria-hidden="true">#</a> 12.1 运算符重载 1</h3><p><strong>运算符重载</strong>（Operator Overload）可以为运算符增加一些新的功能</p><p>全局函数、成员函数都支持运算符重载：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">friend</span> Point <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Point<span class="token punctuation">,</span> Point<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_y<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>point<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_x</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_y</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>m_y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, y = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

Point <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p1<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>m_x <span class="token operator">+</span> p2<span class="token punctuation">.</span>m_x<span class="token punctuation">,</span> p1<span class="token punctuation">.</span>m_y <span class="token operator">+</span> p2<span class="token punctuation">.</span>m_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-2-运算符重载-2-完善" tabindex="-1"><a class="header-anchor" href="#_12-2-运算符重载-2-完善" aria-hidden="true">#</a> 12.2 运算符重载 2：完善</h3><p>尝试重载 <code>+ - += == != -(负号) ++ -- &lt;&lt; &gt;&gt;</code>。</p><p>下面的代码完全可用，可用尝试任意类型的变量进行运算符重载：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    <span class="token keyword">friend</span> <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Car<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_price</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Car <span class="token operator">&amp;</span>car1<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> car1<span class="token punctuation">.</span>m_price <span class="token operator">+</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Car c1 <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> c1 <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-3-运算符重载-3-更多运算符" tabindex="-1"><a class="header-anchor" href="#_12-3-运算符重载-3-更多运算符" aria-hidden="true">#</a> 12.3 运算符重载 3：更多运算符</h3><p>将运算符重载改成成员函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_x<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_y<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_x</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_y</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token function">Point</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>point<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">m_x</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>m_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_y</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>m_y<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;x = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, y = &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Point <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>m_x <span class="token operator">+</span> point<span class="token punctuation">.</span>m_x<span class="token punctuation">,</span> m_y <span class="token operator">+</span> point<span class="token punctuation">.</span>m_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>全局函数，成员函数都支持重载。</p><p>如何保证：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token punctuation">(</span>car1 <span class="token operator">+</span> car2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>这样的语句不被允许（这个语句将对象赋值给临时对象）。</p><p>方法是加上两个 <code>const</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 成员函数</span>
<span class="token keyword">const</span> Point <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>point<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span>m_x <span class="token operator">+</span> point<span class="token punctuation">.</span>m_x<span class="token punctuation">,</span> m_y <span class="token operator">+</span> point<span class="token punctuation">.</span>m_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>第一个 <code>const</code> 保证临时对象不会被赋值</li><li>第二个 <code>const</code> 保证多个对象可以连续操作 <ul><li>因为返回的对象是 <code>const</code> 的，不能调用非 <code>const</code> 函数</li></ul></li></ul><p>其他示例：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 下面都是成员函数</span>
Point <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m_x <span class="token operator">+=</span> point<span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>
    m_y <span class="token operator">+=</span> point<span class="token punctuation">.</span>m_y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Point <span class="token operator">&amp;</span>point<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>m_x <span class="token operator">==</span> point<span class="token punctuation">.</span>m_x<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>m_y <span class="token operator">==</span> point<span class="token punctuation">.</span>m_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_12-4-运算符重载-4-单目运算符" tabindex="-1"><a class="header-anchor" href="#_12-4-运算符重载-4-单目运算符" aria-hidden="true">#</a> 12.4 运算符重载 4：单目运算符</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 下面都是成员函数</span>
<span class="token keyword">const</span> Point <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token comment">// 负号</span>
    <span class="token keyword">return</span> <span class="token function">Point</span><span class="token punctuation">(</span><span class="token operator">-</span>m_x<span class="token punctuation">,</span> <span class="token operator">-</span>m_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
Point <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// ++p</span>
    m_x<span class="token operator">++</span><span class="token punctuation">;</span>
    m_y<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> Point <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// p++</span>
    Point <span class="token function">old</span><span class="token punctuation">(</span>m_x<span class="token punctuation">,</span> m_y<span class="token punctuation">)</span><span class="token punctuation">;</span>
    m_x<span class="token operator">++</span><span class="token punctuation">;</span>
    m_y<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> old<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，<code>operator++(int)</code> 是固定写法，代表后置 <code>++</code></p><h3 id="_12-5-运算符重载-5-输出" tabindex="-1"><a class="header-anchor" href="#_12-5-运算符重载-5-输出" aria-hidden="true">#</a> 12.5 运算符重载 5：输出</h3><p>如何实现：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>cout <span class="token operator">&lt;&lt;</span> point <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre></div><p>重载 <code>ostream &lt;&lt; ...</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 该函数不是成员函数，可声明为友元函数</span>
ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>stream<span class="token punctuation">,</span> <span class="token keyword">const</span> Point <span class="token operator">&amp;</span>point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">&lt;&lt;</span> point<span class="token punctuation">.</span>m_x <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> point<span class="token punctuation">.</span>m_y <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stream<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>这个函数不能加上 <code>const</code> 修饰，即使没有使用 <code>const</code>，也不能将返回的对象赋值（因为它的赋值操作是私有函数）。</p><h3 id="_12-6-运算符重载-6-输入" tabindex="-1"><a class="header-anchor" href="#_12-6-运算符重载-6-输入" aria-hidden="true">#</a> 12.6 运算符重载 6：输入</h3><p>重载 <code>istream &gt;&gt; ...</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 声明为友元函数</span>
istream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>istream <span class="token operator">&amp;</span>stream<span class="token punctuation">,</span> Point <span class="token operator">&amp;</span>point<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream <span class="token operator">&gt;&gt;</span> point<span class="token punctuation">.</span>m_x<span class="token punctuation">;</span>
    stream <span class="token operator">&gt;&gt;</span> point<span class="token punctuation">.</span>m_y<span class="token punctuation">;</span>
    <span class="token keyword">return</span> stream<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>重载赋值运算符：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 成员函数</span>
Person <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    m_age <span class="token operator">=</span> person<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_12-7-运算符重载-7-单例模式完善" tabindex="-1"><a class="header-anchor" href="#_12-7-运算符重载-7-单例模式完善" aria-hidden="true">#</a> 12.7 运算符重载 7：单例模式完善</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Rocket</span> <span class="token punctuation">{</span>
<span class="token keyword">private</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Rocket <span class="token operator">*</span>ms_rocket<span class="token punctuation">;</span>
    <span class="token function">Rocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Rocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// &lt;Add&gt;</span>
    <span class="token function">Rocket</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rocket <span class="token operator">&amp;</span>rocket<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Rocket <span class="token operator">&amp;</span>rocket<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// &lt;/Add&gt;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">static</span> Rocket <span class="token operator">*</span><span class="token function">sharedRocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意多线程安全</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ms_rocket <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            ms_rocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Rocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> ms_rocket<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deleteRocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 注意多线程安全</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ms_rocket <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">delete</span> ms_rocket<span class="token punctuation">;</span>
            ms_rocket <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-8-运算符重载-8-父类" tabindex="-1"><a class="header-anchor" href="#_12-8-运算符重载-8-父类" aria-hidden="true">#</a> 12.8 运算符重载 8：父类</h3><p>调用父类的运算符重载 <code>Person::operator=(person)</code>：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_age<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Person <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_age <span class="token operator">=</span> person<span class="token punctuation">.</span>m_age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Person</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_score<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    Student <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Student <span class="token operator">&amp;</span>student<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        Person<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_score <span class="token operator">=</span> student<span class="token punctuation">.</span>m_score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-9-运算符重载-9-仿函数-函数对象" tabindex="-1"><a class="header-anchor" href="#_12-9-运算符重载-9-仿函数-函数对象" aria-hidden="true">#</a> 12.9 运算符重载 9：仿函数（函数对象）</h3><p><strong>仿函数</strong> 是将一个对象当作一个函数一样来使用。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Sum</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Sum sum<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比普通函数，它作为对象可以保存状态。</p><p>有一些运算符不可以被重载</p><ul><li><code>.</code></li><li><code>::</code></li><li><code>? :</code></li><li><code>sizeof</code></li></ul><p>有一些运算符只能重载为成员函数，比如</p><ul><li><code>=</code> 赋值</li><li><code>[]</code> 下标</li><li><code>()</code> 函数调用</li><li><code>-&gt;</code> 指针访问成员</li></ul><h3 id="_12-10-模板-1" tabindex="-1"><a class="header-anchor" href="#_12-10-模板-1" aria-hidden="true">#</a> 12.10 模板 1</h3><p>泛型，是一种将类型参数化以达到代码复用的技术，C++ 中使用模板来实现泛型。</p><p>模板的使用格式如下：</p><ul><li><code>template &lt;typename\\class T&gt;</code></li><li><code>typename</code> 和 <code>class</code> 是等价的</li></ul><p>注意：</p><ol><li>模板没有被使用时，是不会被实例化出来的</li><li>模板的声明和实现如果分离到 <code>.h</code> 和 <code>.cpp</code> 中，会导致链接错误</li><li>一般将模板的声明和实现统一放到一个 <code>.hpp</code> 文件中</li></ol><p>编译细节：</p><ul><li>泛型会生成多个不同的函数，用到什么生成什么</li><li>没有使用的时候是不会被编译的</li></ul><h2 id="_13-其他语法-b" tabindex="-1"><a class="header-anchor" href="#_13-其他语法-b" aria-hidden="true">#</a> 13. 其他语法 B</h2><h3 id="_13-1-模板-2-编译细节" tabindex="-1"><a class="header-anchor" href="#_13-1-模板-2-编译细节" aria-hidden="true">#</a> 13.1 模板 2：编译细节</h3><p>普通编译：</p><p><img src="`+d+'" alt="链接" loading="lazy"></p><p>带模板的编译：</p><p><img src="'+v+`" alt="带模板的链接" loading="lazy"></p><p>交换两个变量的值模板：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">swapValues</span><span class="token punctuation">(</span>T <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> T <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    T temp <span class="token operator">=</span> v1<span class="token punctuation">;</span>
    v1 <span class="token operator">=</span> v2<span class="token punctuation">;</span>
    v2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token generic-function"><span class="token function">swapValues</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多参数模板：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T1</span><span class="token punctuation">,</span> <span class="token keyword">class</span> <span class="token class-name">T2</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span>T1 <span class="token operator">&amp;</span>v1<span class="token punctuation">,</span> T2 <span class="token operator">&amp;</span>v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> v1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> v2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">20.0</span><span class="token punctuation">;</span>
    <span class="token function">display</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>提示：此时 <code>display(a, b)</code> 与 <code>display&lt;int, double&gt;(a, b)</code> 效果一致。</p></blockquote><h3 id="_13-2-模板-3-动态数组" tabindex="-1"><a class="header-anchor" href="#_13-2-模板-3-动态数组" aria-hidden="true">#</a> 13.2 模板 3：动态数组</h3><p>实现一个动态数组：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_CAP</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token keyword">class</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>m_data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_capacity<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">bool</span> is_lager <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>is_lager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> <span class="token operator">*</span>new_space <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m_capacity <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>new_space<span class="token punctuation">,</span> m_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span>
            m_data <span class="token operator">=</span> new_space<span class="token punctuation">;</span>
            m_capacity <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>m_capacity <span class="token operator">&lt;=</span> DEFAULT_CAP<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> <span class="token operator">*</span>new_space <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m_capacity <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>new_space<span class="token punctuation">,</span> m_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">*</span> m_capacity <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span>
            m_data <span class="token operator">=</span> new_space<span class="token punctuation">;</span>
            m_capacity <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity <span class="token operator">=</span> DEFAULT_CAP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m_capacity <span class="token operator">=</span> <span class="token punctuation">(</span>capacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> capacity <span class="token operator">:</span> DEFAULT_CAP<span class="token punctuation">;</span>
        m_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>m_capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m_data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span> m_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token string">&quot;Array Overflow&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> m_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m_size <span class="token operator">==</span> m_capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        m_data<span class="token punctuation">[</span>m_size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是示例代码，其中 <code>resize()</code> 函数为自己写的实现。</p><h3 id="_13-3-模板-4-类模板" tabindex="-1"><a class="header-anchor" href="#_13-3-模板-4-类模板" aria-hidden="true">#</a> 13.3 模板 4：类模板</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DEFAULT_CAP</span> <span class="token expression"><span class="token number">10</span></span></span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>
    Item <span class="token operator">*</span>m_data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_capacity<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">resize</span><span class="token punctuation">(</span><span class="token keyword">bool</span> is_lager <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>is_lager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> <span class="token operator">*</span>new_space <span class="token operator">=</span> <span class="token keyword">new</span> Item<span class="token punctuation">[</span>m_capacity <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>new_space<span class="token punctuation">,</span> m_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Item<span class="token punctuation">)</span> <span class="token operator">*</span> m_size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span>
            m_data <span class="token operator">=</span> new_space<span class="token punctuation">;</span>
            m_capacity <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>m_capacity <span class="token operator">&lt;=</span> DEFAULT_CAP<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> <span class="token operator">*</span>new_space <span class="token operator">=</span> <span class="token keyword">new</span> Item<span class="token punctuation">[</span>m_capacity <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token function">memcpy</span><span class="token punctuation">(</span>new_space<span class="token punctuation">,</span> m_data<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Item<span class="token punctuation">)</span> <span class="token operator">*</span> m_capacity <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span>
            m_data <span class="token operator">=</span> new_space<span class="token punctuation">;</span>
            m_capacity <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Array</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity <span class="token operator">=</span> DEFAULT_CAP<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        m_capacity <span class="token operator">=</span> <span class="token punctuation">(</span>capacity <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> capacity <span class="token operator">:</span> DEFAULT_CAP<span class="token punctuation">;</span>
        m_data <span class="token operator">=</span> <span class="token keyword">new</span> Item<span class="token punctuation">[</span>m_capacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m_data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Item <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">&gt;</span> m_size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token string">&quot;Array Overflow&quot;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> m_data<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Item value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>m_size <span class="token operator">==</span> m_capacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">resize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        m_data<span class="token punctuation">[</span>m_size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_size<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    Item <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>扩容使用 <strong>均摊策略</strong>。</p><p>声明和实现分离时要写两份 <code>template &lt;class Item&gt;</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token operator">&gt;</span>
<span class="token keyword">void</span> <span class="token class-name">Array</span><span class="token operator">&lt;</span>Item<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">add</span><span class="token punctuation">(</span>Item value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>类模板中的友元函数：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">Array</span> <span class="token punctuation">{</span>
    <span class="token keyword">friend</span> ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Array<span class="token operator">&lt;</span>Item<span class="token operator">&gt;</span> <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_size<span class="token punctuation">;</span>
    <span class="token keyword">int</span> m_capacity<span class="token punctuation">;</span>
    Item <span class="token operator">*</span>m_data <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">Item</span><span class="token operator">&gt;</span>
ostream <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>ostream <span class="token operator">&amp;</span>stream<span class="token punctuation">,</span> <span class="token keyword">const</span> Array<span class="token operator">&lt;</span>Item<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        stream <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">.</span>m_data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span>m_size <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> array<span class="token punctuation">[</span>array<span class="token punctuation">.</span>m_size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stream <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果友元函数包含泛型，函数名后面需要加上 <code>&lt;&gt;</code></li><li><code>m_data = new Item[m_capacity];</code> 注意类要含有无参数构造函数</li></ul><h3 id="_13-4-模板-5-动态数组的删除和插入" tabindex="-1"><a class="header-anchor" href="#_13-4-模板-5-动态数组的删除和插入" aria-hidden="true">#</a> 13.4 模板 5：动态数组的删除和插入</h3><ul><li>越界问题可以单独判断，作为一个函数</li><li>删除每一个后面的元素都会向前错位，<code>m_size--;</code></li><li>插入每一个后面的元素都会向后错位，<code>m_size++;</code></li></ul><h3 id="_13-5-类型转换-1-const-cast" tabindex="-1"><a class="header-anchor" href="#_13-5-类型转换-1-const-cast" aria-hidden="true">#</a> 13.5 类型转换 1：<code>const_cast</code></h3><ul><li>C 语言风格的类型转换符 <ul><li><code>(type)expression</code></li><li><code>type(expression)</code></li></ul></li><li>C++ 中有 4 个类型转换符 <ul><li><code>static_cast</code></li><li><code>dynamic_cast</code></li><li><code>reinterpret_cast</code></li><li><code>const_cast</code></li></ul></li></ul><p>使用格式：<code>xxx_cast&lt;type&gt;(expression)</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
<span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>const_cast</code> 一般用于将 <code>const</code> 转换为非 <code>const</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 不安全代码</span>
<span class="token comment">// const * 不能赋值给非 const *</span>
<span class="token keyword">const</span> Person <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// C 风格</span>
Person <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token punctuation">(</span>Person <span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>
<span class="token comment">// C++ 风格</span>
Person <span class="token operator">*</span>p3 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">const_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Person <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>汇编代码一致，没有任何区别。</p><h3 id="_13-6-类型转换-2-dynamic-cast" tabindex="-1"><a class="header-anchor" href="#_13-6-类型转换-2-dynamic-cast" aria-hidden="true">#</a> 13.6 类型转换 2：<code>dynamic_cast</code></h3><p>一般用于多态类型的转换，有运行时安全检查：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 不安全代码</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Person</span></span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Person <span class="token operator">*</span>p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Person <span class="token operator">*</span>p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// C 风格的类型转换</span>
    Student <span class="token operator">*</span>stu1 <span class="token operator">=</span> <span class="token punctuation">(</span>Student <span class="token operator">*</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>
    Student <span class="token operator">*</span>stu2 <span class="token operator">=</span> <span class="token punctuation">(</span>Student <span class="token operator">*</span><span class="token punctuation">)</span>p2<span class="token punctuation">;</span>
    <span class="token comment">// C++ 风格的类型转换</span>
    Student <span class="token operator">*</span>stu1 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Student <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    Student <span class="token operator">*</span>stu2 <span class="token operator">=</span> <span class="token generic-function"><span class="token function">dynamic_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span>Student <span class="token operator">*</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序运行中，检测到不安全赋值会被赋值为 <code>NULL</code>。</p><p>没有联系的类型或者子类指针指向父类对象时被认为是不安全的。</p><h3 id="_13-7-类型转换-3-static-cast" tabindex="-1"><a class="header-anchor" href="#_13-7-类型转换-3-static-cast" aria-hidden="true">#</a> 13.7 类型转换 3：<code>static_cast</code></h3><p>对比 <code>dynamic_cast</code>，缺乏运行时安全检测：</p><ul><li>不能交叉转换（不是同一继承体系的，无法转换）</li><li>常用于基本数据类型的转换、非 <code>const</code> 转成 <code>const</code></li><li>使用范围较广</li></ul><h3 id="_13-8-类型转换-4-reinterpret-cast" tabindex="-1"><a class="header-anchor" href="#_13-8-类型转换-4-reinterpret-cast" aria-hidden="true">#</a> 13.8 类型转换 4：<code>reinterpret_cast</code></h3><ul><li>属于比较底层的强制转换，没有任何类型检查和格式转换，仅仅是简单的二进制数据拷贝</li><li>可以交叉转换</li><li>可以将指针和整数互相转换</li></ul><p>不同类型的转换要写一个 <code>&amp;</code>，但是同类型的指针和类原型不需要：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token generic-function"><span class="token function">reinterpret_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&amp;</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_13-9-c-11" tabindex="-1"><a class="header-anchor" href="#_13-9-c-11" aria-hidden="true">#</a> 13.9 C++11</h3><table><thead><tr><th>时间</th><th>C++ 标准</th><th>名称</th></tr></thead><tbody><tr><td>1998</td><td><code>ISO/IEC 14882:1998</code></td><td><code>C++98</code></td></tr><tr><td>2003</td><td><code>ISO/IEC 14882:2003</code></td><td><code>C++03</code></td></tr><tr><td>2011</td><td><code>ISO/IEC 14882:2011</code></td><td><code>C++11</code></td></tr><tr><td>2014</td><td><code>ISO/IEC 14882:2014</code></td><td><code>C++14</code></td></tr><tr><td>2017</td><td><code>ISO/IEC 14882:2017</code></td><td><code>C++17</code></td></tr><tr><td>2020</td><td><code>ISO/IEC 14882:2020</code></td><td><code>C++20</code></td></tr></tbody></table><p><code>auto</code>：</p><ul><li>可以从初始化表达式中推断出变量的类型，大大简化编程工作</li><li>属于编译器特性，不影响最终的机器码质量，不影响运行效率</li></ul><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
</code></pre></div><p><code>decltype</code>：</p><ul><li>可以获取变量的类型</li></ul><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">decltype</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
</code></pre></div><p><code>nullptr</code>：</p><ul><li>可以解决 <code>NULL</code> 的二义性问题</li><li>因为 C 语言宏定义 <code>#define NULL (void *)0</code></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">printInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">printInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这句代码将调用 void printInt(int p)</span>
    <span class="token function">printInt</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 将调用 void printInt(int *p)</span>
    <span class="token function">printInt</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快速遍历：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> item <span class="token operator">:</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> item <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>精简的初始化方法：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_13-10-lambda-1" tabindex="-1"><a class="header-anchor" href="#_13-10-lambda-1" aria-hidden="true">#</a> 13.10 <code>Lambda</code> 1</h3><p><code>Lambda</code> 表达式：</p><ul><li>有点类似于 JavaScript 中的闭包、iOS 中的 <code>Block</code>，本质就是函数</li><li>完整结构 <code>[capture list] (params list) mutable exception -&gt; return type { function body }</code></li><li>参数 <ul><li><code>capture list</code> 捕获外部变量列表</li><li><code>params list</code> 形参列表，不能使用默认参数，不能省略参数名</li><li><code>mutable</code> 用来说用是否可以修改捕获的变量</li><li><code>exception</code> 异常设定</li><li><code>return type</code> 返回值类型</li><li><code>function body</code> 函数体</li></ul></li><li>有时可以省略部分结构 <ul><li><code>[capture list] (params list) -&gt; return type {function body}</code></li><li><code>[capture list] (params list) {function body}</code></li><li><code>[capture list] {function body}</code></li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>p1<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token keyword">int</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">auto</span> p2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">auto</span> p3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v1 <span class="token operator">-</span> v2<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">auto</span> p4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;test&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其他示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>func <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v1 <span class="token operator">-</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v1 <span class="token operator">*</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v1 <span class="token operator">/</span> v2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_14-其他语法-c" tabindex="-1"><a class="header-anchor" href="#_14-其他语法-c" aria-hidden="true">#</a> 14. 其他语法 C</h2><h3 id="_14-1-lambda-2-变量捕获" tabindex="-1"><a class="header-anchor" href="#_14-1-lambda-2-变量捕获" aria-hidden="true">#</a> 14.1 <code>Lambda</code> 2：变量捕获</h3><p>两次打印的值是一致的：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>
    <span class="token comment">// 值捕获</span>
    <span class="token keyword">auto</span> func <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
    b <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>
    <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的捕获可以改为 <strong>隐式捕获</strong>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>地址捕获，<code>a</code> 是地址捕获，<code>b</code> 是值捕获：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>地址捕获（隐式）：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><code>a</code> 是地址捕获，其余是值捕获：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">=</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>a<span class="token punctuation">]</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p><code>mutable</code> 可以更改值捕获的值：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">auto</span> func <span class="token operator">=</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">mutable</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">++</span>a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 11</span>
cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 输出 10</span>
</code></pre></div><h3 id="_14-2-c-14、c-17" tabindex="-1"><a class="header-anchor" href="#_14-2-c-14、c-17" aria-hidden="true">#</a> 14.2 C++14、C++17</h3><p>VS 设置 C++ 标准</p><ol><li>调试(D)</li><li>测试 属性...</li><li>配置属性 C/C++</li><li>C++ 语言标准</li></ol><div class="hint-container warning"><p class="hint-container-title">C++ 新特征</p><p>还没有普及的特征，谨慎使用。</p></div><ul><li><strong>[C++14]+</strong> 泛型 <code>Lambda</code> 表达式<div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">auto</span> func <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">auto</span> v1<span class="token punctuation">,</span> <span class="token keyword">auto</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> v1 <span class="token operator">+</span> v2 <span class="token punctuation">}</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20.5</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre></div></li><li><strong>[C++17]+</strong></li></ul><p>可以初始化的 <code>if</code> 语句，作用域就是 <code>if</code> 语句：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> a <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span> a <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>可以初始化的 <code>switch</code> 语句：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_14-3-异常-1-捕捉" tabindex="-1"><a class="header-anchor" href="#_14-3-异常-1-捕捉" aria-hidden="true">#</a> 14.3 异常 1：捕捉</h3><p>编程过程中的常见错误类型：</p><ul><li>语法错误</li><li>逻辑错误</li><li>异常</li><li>.....</li></ul><p>异常：</p><ul><li>异常是一种在程序运行过程中可能会发生的错误（比如内存不够）</li><li>异常没有被处理，会导致程序终止</li></ul><p><code>try</code> 语句捕捉异常：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception <span class="token punctuation">[</span>name2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>exception <span class="token punctuation">[</span>name1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>捕捉全部异常：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_14-4-异常-2-抛出" tabindex="-1"><a class="header-anchor" href="#_14-4-异常-2-抛出" aria-hidden="true">#</a> 14.4 异常 2：抛出</h3><p><code>throw</code> 异常后，会在当前函数中查找匹配的 <code>catch</code>，找不到就终止当前函数代码，去上一层函数中查找。如果最终都找不到匹配的 <code>catch</code>，整个程序就会终止。</p><p>抛出示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>v2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token string">&quot;DivideByZeroError&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> v1 <span class="token operator">/</span> v2<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">divide</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> exception <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>捕捉异常是严谨的，类型必须严格匹配。</p><p>异常抛出声明：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 可能抛出 int 类型异常</span>
<span class="token keyword">int</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">int</span> v1<span class="token punctuation">,</span> <span class="token keyword">int</span> v2<span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 可能抛出任意类型异常</span>
<span class="token keyword">void</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 不抛出任何异常</span>
<span class="token keyword">void</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
<span class="token comment">// 可能抛出 int, double 类型的异常</span>
<span class="token keyword">void</span> <span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throw</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-5-异常-3-自定义" tabindex="-1"><a class="header-anchor" href="#_14-5-异常-3-自定义" aria-hidden="true">#</a> 14.5 异常 3：自定义</h3><p>构建异常类，抛出异常：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">DivideByZeroError</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Exception</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">AddError</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Exception</span></span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div><p>包含异常信息的异常类的一种示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">virtual</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">virtual</span> <span class="token keyword">int</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">DivideByZeroError</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Exception</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;DivideByZeroError&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">304</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">AddError</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">Exception</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;AddError&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">int</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">204</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">DivideByZeroError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Exception <span class="token operator">&amp;</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> error<span class="token punctuation">.</span><span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>标准异常：</p>`,293),C=e(`<table><thead><tr><th>异常名称</th><th>说 明</th></tr></thead><tbody><tr><td><code>logic_error</code></td><td>逻辑错误</td></tr><tr><td><code>runtime_error</code></td><td>运行时错误</td></tr><tr><td><code>bad_alloc</code></td><td>使用 <code>new</code> 或 <code>new[]</code> 分配内存失败时抛出的异常</td></tr><tr><td><code>bad_typeid</code></td><td>使用 <code>typeid</code> 操作一个 <code>NULL</code> 指针，而且该指针是带有虚函数的类，这时抛出 <code>bad_typeid</code> 异常</td></tr><tr><td><code>bad_cast</code></td><td>使用 <code>dynamic_cast</code> 转换失败时抛出的异常</td></tr><tr><td><code>ios_base::failure</code></td><td><code>io</code> 过程中出现的异常</td></tr><tr><td><code>bad_exception</code></td><td>这是个特殊的异常，如果函数的异常列表里声明了 <code>bad_exception</code> 异常，当函数内部抛出了异常列表中没有的异常时，如果调用的 <code>unexpected()</code> 函数中抛出了异常，不论什么类型，都会被替换为 <code>bad_exception</code> 类型</td></tr></tbody></table><p><code>logic_error</code> 的派生类</p><table><thead><tr><th>异常名称</th><th>说 明</th></tr></thead><tbody><tr><td><code>length_error</code></td><td>试图生成一个超出该类型最大长度的对象时抛出该异常，例如 vector 的 resize 操作</td></tr><tr><td><code>domain_error</code></td><td>参数的值域错误，主要用在数学函数中，例如使用一个负值调用只能操作非负数的函数</td></tr><tr><td><code>out_of_range</code></td><td>超出有效范围</td></tr><tr><td><code>invalid_argument</code></td><td>参数不合适在标准库中，当利用 <code>string</code> 对象构造 <code>bitset</code> 时，而 <code>string</code> 中的字符不是 <code>0</code> 或 <code>1</code> 的时候，抛出该异常</td></tr></tbody></table><p><code>runtime_error</code> 的派生类</p><table><thead><tr><th>异常名称</th><th>说 明</th></tr></thead><tbody><tr><td><code>range_error</code></td><td>计算结果超出了有意义的值域范围</td></tr><tr><td><code>overflow_error</code></td><td>算术计算上溢</td></tr><tr><td><code>underflow_error</code></td><td>算术计算下溢</td></tr></tbody></table><h3 id="_14-6-智能指针-1-auto-ptr" tabindex="-1"><a class="header-anchor" href="#_14-6-智能指针-1-auto-ptr" aria-hidden="true">#</a> 14.6 智能指针 1：<code>auto_ptr</code></h3><p>传统指针的问题：</p><ul><li>传统指针存在的问题</li><li>需要手动管理内存</li><li>容易发生内存泄露（如忘记释放、出现异常等）</li><li>释放之后产生野指针</li></ul><p>智能指针就是为了解决传统指针存在的问题：</p><ul><li><strong>[过时的]</strong> <code>auto_ptr</code> 属于 C++98 标准（在 C++11 中已经不推荐使用，有缺陷，如不能用于数组）</li><li><strong>[C++11]+</strong> <code>shared_ptr</code></li><li><strong>[C++11]+</strong> <code>unique_ptr</code></li></ul><p>智能指针指向堆空间的值：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>auto_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>在 <code>auto_ptr</code> 被销毁的时候指针指向的空间被释放。</p><h3 id="_14-7-智能指针-2-自实现" tabindex="-1"><a class="header-anchor" href="#_14-7-智能指针-2-自实现" aria-hidden="true">#</a> 14.7 智能指针 2：自实现</h3><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token operator">&gt;</span>
<span class="token keyword">class</span> <span class="token class-name">SmartPointer</span> <span class="token punctuation">{</span>
    T <span class="token operator">*</span>m_pointer<span class="token punctuation">;</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">SmartPointer</span><span class="token punctuation">(</span>T <span class="token operator">*</span>pointer<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">m_pointer</span><span class="token punctuation">(</span>pointer<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">SmartPointer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_pointer <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
        <span class="token keyword">delete</span> m_pointer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    T <span class="token operator">*</span><span class="token keyword">operator</span><span class="token operator">-&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_pointer<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token keyword">int</span> m_price<span class="token punctuation">;</span>
    <span class="token operator">~</span><span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Car over!&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    SmartPointer<span class="token operator">&lt;</span>Car<span class="token operator">&gt;</span> <span class="token function">p1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_14-8-智能指针-3-shared-ptr" tabindex="-1"><a class="header-anchor" href="#_14-8-智能指针-3-shared-ptr" aria-hidden="true">#</a> 14.8 智能指针 3：<code>shared_ptr</code></h3><p><code>shared_ptr</code> 的设计理念：</p><ul><li>多个 <code>shared_ptr</code> 可以指向同一个对象，当最后一个 <code>shared_ptr</code> 在作用域范围内结束时，对象才会被自动释放</li><li>可以通过一个已存在的智能指针初始化一个新的智能指针</li></ul><p><code>shared_ptr</code> 定义在 <code>&lt;memory&gt;</code> 中：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
</code></pre></div><p>示例：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>shared_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
shared_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> p1 <span class="token operator">=</span> p<span class="token punctuation">;</span>
shared_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>
</code></pre></div><p>下面的代码将产生 5 次构造和 5 此析构：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>shared_ptr<span class="token operator">&lt;</span>Person<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> Person<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>自定义析构 <code>Lambda</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>shared_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> <span class="token function">p</span><span class="token punctuation">(</span><span class="token keyword">new</span> Person<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>Person <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> p<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p><code>shared_ptr</code> 的原理：</p><ul><li>一个 <code>shared_ptr</code> 会对一个对象产生 <strong>强引用</strong>（Strong Reference）</li><li>每个对象都有个与之对应的强引用计数，记录着当前对象被多少个 <code>shared_ptr</code> 强引用着</li><li>可以通过 <code>shared_ptr</code> 的 <code>use_count</code> 函数获得强引用计数</li><li>当有一个新的 <code>shared_ptr</code> 指向对象时，对象的强引用计数就会加一</li><li>当有一个 <code>shared_ptr</code> 销毁时，对象的强引用计数就会减一</li><li>当一个对象的强引用计数为 <code>0</code> 时（没有任何 <code>shared_ptr</code> 指向对象时），对象就会自动销毁</li></ul><h3 id="_14-9-智能指针-4-循环引用、weak-ptr" tabindex="-1"><a class="header-anchor" href="#_14-9-智能指针-4-循环引用、weak-ptr" aria-hidden="true">#</a> 14.9 智能指针 4：循环引用、<code>weak_ptr</code></h3><p>下面的代码执行后不会析构这两个对象：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    shared_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> person<span class="token punctuation">;</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Car()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;~Car()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    shared_ptr<span class="token operator">&lt;</span>Car<span class="token operator">&gt;</span> car<span class="token punctuation">;</span>
    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Person()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;~Person()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    shared_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> <span class="token function">person</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    shared_ptr<span class="token operator">&lt;</span>Car<span class="token operator">&gt;</span> <span class="token function">car</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    person<span class="token operator">-&gt;</span>car <span class="token operator">=</span> car<span class="token punctuation">;</span>
    car<span class="token operator">-&gt;</span>person <span class="token operator">=</span> person<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用弱引用：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    weak_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> person<span class="token punctuation">;</span>
    <span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Car()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;~Car()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span><span class="token operator">:</span>
    shared_ptr<span class="token operator">&lt;</span>Car<span class="token operator">&gt;</span> car<span class="token punctuation">;</span>
    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Person()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;~Person()&quot;</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+'" alt="强引用" loading="lazy"></p><p><img src="'+b+`" alt="弱引用" loading="lazy"></p><h3 id="_14-10-智能指针-5-unique-ptr" tabindex="-1"><a class="header-anchor" href="#_14-10-智能指针-5-unique-ptr" aria-hidden="true">#</a> 14.10 智能指针 5：<code>unique_ptr</code></h3><ul><li><code>unique_ptr</code> 也会对一个对象产生强引用，它可以确保同一时间只有 <code>1</code> 个指针指向对象</li><li>当 <code>unique_ptr</code> 销毁时（作用域结束时），其指向的对象也就自动销毁了</li><li>可以使用 <code>std::move</code> 函数转移 <code>unique_ptr</code> 的所有权</li></ul><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>unique_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> <span class="token function">ptr1</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
unique_ptr<span class="token operator">&lt;</span>Person<span class="token operator">&gt;</span> ptr2 <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">move</span><span class="token punctuation">(</span>ptr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="_15-项目实战" tabindex="-1"><a class="header-anchor" href="#_15-项目实战" aria-hidden="true">#</a> 15. 项目实战</h2><h3 id="_15-1-mfc-1-图标" tabindex="-1"><a class="header-anchor" href="#_15-1-mfc-1-图标" aria-hidden="true">#</a> 15.1 MFC 1：图标</h3><p>GUI 程序需求：</p><ul><li>程序界面</li><li>事件处理</li><li>跨进程访问</li></ul><p>基于 Windows 桌面开发：</p><ul><li>C++ <ul><li>Qt</li><li>MFC</li></ul></li><li>C# <ul><li>WinForm</li><li>WPF</li></ul></li></ul><div class="hint-container warning"><p class="hint-container-title">MFC 框架</p><p>MFC 是一种 <strong>过时</strong> 的框架，如果项目使用建议使用 Qt 等现代化 GUI 框架，课程用于演示开发流程。</p></div><p>安装过程：</p><ol><li>在 <code>Visual Studio Installer</code> 中 <code>修改</code> 组件</li><li>将 <code>使用 C++ 的桌面开发</code> 勾选</li><li>在 <code>单个组件</code> 中确保 <code>适用于最新 v142 生成工具的 C++ MFC (x86和x64)</code> 被勾选</li><li>安装</li></ol><p>安装结束后，创建项目：</p><ol><li>创建新项目，给项目一个名字</li><li>基于模板 <code>MFC 应用程序</code></li><li>应用程序类型选择 <code>基于对话框</code></li><li>创建项目</li></ol><div class="hint-container warning"><p class="hint-container-title">GUI 开发</p><p>如果你没有 GUI 窗体的开发经验，你可能要摸索一段时间，并尝试查找其他资料！</p></div><p>修改原有的控件，拖动到合适位置。</p><p>修改 LOGO：</p><ul><li>方法 1：在属性窗口中更改</li><li>方法 2：在 <code>/res</code> 目录下替换文件</li></ul><p>然后在属性窗口中修改标题名称，名称任意。</p><h3 id="_15-2-mfc-2-按钮" tabindex="-1"><a class="header-anchor" href="#_15-2-mfc-2-按钮" aria-hidden="true">#</a> 15.2 <code>MFC</code> 2：按钮</h3><p>更改原有的控件，拖动 <code>Button</code> 到 GUI 界面上面。</p><p>在 <code>MFCApplicationDlg.cpp</code> 文件内写一个函数，注意 <code>MFCApplication</code> 改为你的项目的名称：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">MFCApplicationDlg</span><span class="token double-colon punctuation">::</span><span class="token function">OnBnClickedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">TRACE</span><span class="token punctuation">(</span><span class="token string">&quot;age is %d\\n&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>在 <code>MFCApplicationDlg.h</code> 中写这个函数的声明：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>afx_msg <span class="token keyword">void</span> <span class="token function">OnBnClickedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>然后绑定这个函数，找到这个按钮控件的 <code>ID</code>，这个值在 <code>Resource.h</code> 中有预定义，可以更改它：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">IDC_BUTTON2</span> <span class="token expression"><span class="token number">1002</span></span></span>
</code></pre></div><p>在 <code>MFCApplicationDlg.cpp</code> 中有一行：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">BEGIN_MWSSAGE_MAP</span><span class="token punctuation">(</span>MFCApplicationDlg<span class="token punctuation">,</span> CDialogEx<span class="token punctuation">)</span>
    <span class="token comment">// ......</span>
    <span class="token comment">// ......</span>
    <span class="token comment">// &lt;在此插入&gt;</span>
<span class="token function">END_MESSAGE_MAP</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>在插入位置加入 <code>ON_BN_CLICKED(IDC_BUTTON2, OnBnClickedDemo)</code>。</p><h3 id="_15-3-mfc-3-调试" tabindex="-1"><a class="header-anchor" href="#_15-3-mfc-3-调试" aria-hidden="true">#</a> 15.3 <code>MFC</code> 3：调试</h3><ul><li><code>TRACE(str, ...)</code><ul><li>类似于 C 语言的 <code>printf()</code>，只能在调试模式下看到打印信息</li></ul></li><li><code>AfxMessageBox(str)</code><ul><li>在提示窗口中显示内容</li></ul></li><li><code>MessageBox()</code><ul><li>只在 <code>CWnd</code> 的子类中使用，功能比 <code>AfxMessageBox()</code> 多</li></ul></li></ul><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 产生消息</span>
CString str<span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">&quot;age is %d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">AfxMessageBox</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出更多信息</span>
CString str<span class="token punctuation">;</span>
str<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">&quot;age is %d&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">MessageBox</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">&quot;错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> MB_YESNO<span class="token operator">|</span> MB_ICONERROR<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可以定义宏来简化信息</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">log</span><span class="token expression"><span class="token punctuation">(</span>fmt<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> </span><span class="token punctuation">\\</span>
<span class="token expression">CString str<span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
<span class="token expression">str<span class="token punctuation">.</span><span class="token function">Format</span><span class="token punctuation">(</span><span class="token function">CString</span><span class="token punctuation">(</span>fmt<span class="token punctuation">)</span><span class="token punctuation">,</span> __VA_ARGS__<span class="token punctuation">)</span><span class="token punctuation">;</span> </span><span class="token punctuation">\\</span>
<span class="token expression"><span class="token function">AfxMessageBox</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span>
<span class="token comment">// 使用自定义的输出</span>
<span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;age is %d&quot;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-4-mfc-4-打开网页" tabindex="-1"><a class="header-anchor" href="#_15-4-mfc-4-打开网页" aria-hidden="true">#</a> 15.4 <code>MFC</code> 4：打开网页</h3><p>打开一个 URL</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token function">ShellExecute</span><span class="token punctuation">(</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">&quot;open&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">&quot;https://123.yali.fun/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span>
    <span class="token constant">NULL</span><span class="token punctuation">,</span>
    SW_SHOWNORMAL
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="_15-5-mfc-5-checkbox" tabindex="-1"><a class="header-anchor" href="#_15-5-mfc-5-checkbox" aria-hidden="true">#</a> 15.5 <code>MFC</code> 5：<code>checkbox</code></h3><p>添加一个 <code>checkbox</code> 控件，大概像这样：</p><blockquote><label><input type="checkbox">CheckBox </label></blockquote><p>手动注册事件：</p><ol><li>右键这个控件，添加事件处理程序，消息类型 <code>EN_CLICK</code></li><li>然后可以设定函数，也可以不改动，然后设定类为 <code>MFCApplicationDlg</code></li></ol><p>双击可以自动完成上述功能。</p><p>获取 <code>checkbox</code> 的状态：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 方法 1</span>
<span class="token keyword">void</span> <span class="token class-name">MFCApplicationDlg</span><span class="token double-colon punctuation">::</span><span class="token function">OnBnClickedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    BOOL checked <span class="token operator">=</span> <span class="token function">IsDlgButtonChecked</span><span class="token punctuation">(</span>IDC_BUTTON2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>checked<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;已经勾选&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;没有勾选&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 方法 2</span>
<span class="token keyword">void</span> <span class="token class-name">MFCApplicationDlg</span><span class="token double-colon punctuation">::</span><span class="token function">OnBnClickedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    CButton <span class="token operator">*</span>button <span class="token operator">=</span> <span class="token punctuation">(</span>CButton <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_BUTTON2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>button<span class="token operator">-&gt;</span><span class="token function">GetCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;已经勾选&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;没有勾选&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有其他方法</p><ol><li>手动绑定成员变量 <ul><li>在头文件 <code>MFCApplicationDlg.h</code> 最后添加 <code>CButton m_mybn2</code></li><li>在 <code>void CMFCApplicationDlg::DoDataExchange()</code> 函数内添加一行 <code>DDX_Contorl(pDX, IDC_BUTTON2, m_mybn2);</code></li></ul></li><li>自动绑定成员变量 <ul><li>右键控件，添加变量即可</li></ul></li></ol><p>总结，读取和修改 <code>checkbox</code> 的状态：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 方法 1 -----------------</span>
BOOL state <span class="token operator">=</span> <span class="token function">IsDlgButtonChecked</span><span class="token punctuation">(</span>IDC_BUTTON2<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">CheckDlgButton</span><span class="token punctuation">(</span>IDC_BUTTON2<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方法 2 -----------------</span>
CButton <span class="token operator">*</span>button <span class="token operator">=</span> <span class="token punctuation">(</span>CButton <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">GetDlgItem</span><span class="token punctuation">(</span>IDC_BUTTON2<span class="token punctuation">)</span><span class="token punctuation">;</span>
BOOL state <span class="token operator">=</span> button<span class="token operator">-&gt;</span><span class="token function">GetCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
button<span class="token operator">-&gt;</span><span class="token function">SetCheck</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 方法 3 -----------------</span>
BOOL state <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>m_mybn2<span class="token punctuation">.</span><span class="token function">GetCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token operator">-&gt;</span>m_mybn2<span class="token punctuation">.</span><span class="token function">SetCheck</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-6-软件破解-1-文件格式" tabindex="-1"><a class="header-anchor" href="#_15-6-软件破解-1-文件格式" aria-hidden="true">#</a> 15.6 软件破解 1：文件格式</h3><p>可执行程序的文件格式</p><table><thead><tr><th>平台</th><th>格式</th></tr></thead><tbody><tr><td>Windows</td><td><code>PE</code></td></tr><tr><td>Linux</td><td><code>ELF</code></td></tr><tr><td>Mac / iOS</td><td><code>Mach-O</code></td></tr></tbody></table><p>Windows 破解文件要求：</p><ul><li>文件格式 <ul><li><code>PE</code></li></ul></li><li>汇编语言 <ul><li>x86 / x64 汇编</li></ul></li><li>工具 <ul><li>Ollydbg / ...</li></ul></li><li>Windows API</li></ul><p>我们先举例一个程序 <code>CrackMe.exe</code> 这个程序（在附件中）：</p><ul><li>这个程序要求我们输入一段序列号，这是一个静态程序（即不联网获取序列信息的程序），这个程序的序列号在程序的内部</li><li>如果你能分析 <code>PE</code> 格式的文件，发现程序的字符串储存在了文件地址 <code>0x00003000</code> 到文件地址 <code>0x00003038</code> 这个区段内</li><li>而地址 <code>0x00003034</code> 处发现一个字符串指代了这个序列号，这个值即为序列号，这个值是字符串 <code>9981</code>，输入发现正确</li></ul><h3 id="_15-7-软件破解-2-od" tabindex="-1"><a class="header-anchor" href="#_15-7-软件破解-2-od" aria-hidden="true">#</a> 15.7 软件破解 2：OD</h3><ol><li>了解 OD 的使用方法</li><li>了解 OD 的调试方法</li><li>找出软件的运行时寄存器的值，并找出序列号</li></ol><p>附件中还有 OD 英文版和 OD 的吾爱破解的加强版本。</p><p>破解汇编代码：</p><div class="language-x86asm line-numbers-mode" data-ext="x86asm"><pre class="language-x86asm"><code>; ......
push edx
push eax
call dword ptr ds:[lstrcmpA]
test eax, eax
push 0x0
jnz short CrackMe.004010E8
push CrackMe.00403030
push CrackMe.00403024
push 0x0
call dword ptr ds:[MessageBoxA]
mov eax, 0x1
add esp, 0x14
retn 0x10
push CrackMe.0040301C
push CrackMe.00403000
; ......
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_15-8-软件破解-3-暴力破解" tabindex="-1"><a class="header-anchor" href="#_15-8-软件破解-3-暴力破解" aria-hidden="true">#</a> 15.8 软件破解 3：暴力破解</h3><p>通过修改原有软件的方法，改变软件内的判断，使得软件在所有情况下都可以通过。</p><p>根据汇编分析，有下面的方法：</p><ol><li>删除 <code>0x004010C9</code> 地址的代码，跳过判断</li><li>将判断改为恒为 <code>true</code></li></ol><div class="hint-container warning"><p class="hint-container-title">汇编指令</p><p>不可以直接删除指令代码，会导致地址错位，而改应该成空指令 <code>nop</code></p></div><p><code>nop</code> 的代码是 <code>90</code>，下面演示第一种思路：</p><p>下面是汇编代码对应的机器码：</p><div class="language-x86asm" data-ext="x86asm"><pre class="language-x86asm"><code>push 0x0                    ; 6A 00
jnz short CrackMe.004010E8  ; 75 1D
push CrackMe.00403030       ; 68 30304000
push CrackMe.00403024       ; 68 24304000
push 0x0                    ; 6A 00
</code></pre></div><p>改动如下</p><div class="language-x86asm" data-ext="x86asm"><pre class="language-x86asm"><code>push 0x0                    ; 6A 00
nop                         ; 90
nop                         ; 90
push CrackMe.00403030       ; 68 30304000
push CrackMe.00403024       ; 68 24304000
push 0x0                    ; 6A 00
</code></pre></div><p>选择区域右键 -&gt; <code>Fill with NOPs</code>。</p><p>然后右键 -&gt; <code>Edit</code> -&gt; <code>Copy all modfiied to executable</code>，可以保存新的被破解的软件。</p><p>一般的软件破解思路：</p>`,108),P=e('<p>破解加壳软件：</p><p><img src="'+y+`" alt="破解加壳软件" loading="lazy"></p><h3 id="_15-9-软件破解-4-ce" tabindex="-1"><a class="header-anchor" href="#_15-9-软件破解-4-ce" aria-hidden="true">#</a> 15.9 软件破解 4：CE</h3><p>使用 <code>Cheat Engine</code> 修改游戏内存</p><ol><li>阳光现有值 <code>50</code>，首次扫描</li><li>阳光现在是 <code>75</code>，再次扫描</li><li>发现地址为 <code>1F0DC918</code> 的值变为 <code>75</code></li><li>把这个地址的值改为 <code>500</code> 结果更改成功</li></ol><h3 id="_15-10-软件破解-5-秒杀僵尸" tabindex="-1"><a class="header-anchor" href="#_15-10-软件破解-5-秒杀僵尸" aria-hidden="true">#</a> 15.10 软件破解 5：秒杀僵尸</h3><p>原理：</p><ul><li>原来的代码可能是 <code>zombie.life -= damage;</code> 表示僵尸受到伤害值</li><li>我们把这句代码改为 <code>zombie.life = 0;</code> 直接杀死僵尸</li></ul><p>扫描：</p><ol><li>未知的数值</li><li>未变动的数值</li><li>减小的数值，不断搜索</li><li>找出是哪个代码修改了这个地址</li></ol><p>找出的地址是 <code>0x00531319</code> 的代码修改了这个地址。</p><div class="language-x86asm" data-ext="x86asm"><pre class="language-x86asm"><code>mov dword ptr [ebp+0xC8], edi   ; 89 BD C8 00
</code></pre></div><p>将减少寄存器值的代码改为：</p><div class="language-x86asm" data-ext="x86asm"><pre class="language-x86asm"><code>sub edi, edi
</code></pre></div><p>修改 <code>.exe</code> 然后保存即可。</p><p>任务</p><ol><li>实现无线阳光</li><li>实现无 CD</li><li>僵尸的帽子 / 铁门等物件的秒杀</li><li>实现后台运行</li><li>实现植物不死</li><li>实现僵尸不死</li></ol><h2 id="_16-项目实战-b" tabindex="-1"><a class="header-anchor" href="#_16-项目实战-b" aria-hidden="true">#</a> 16. 项目实战 B</h2><h3 id="_16-1-外挂开发-1-监控游戏" tabindex="-1"><a class="header-anchor" href="#_16-1-外挂开发-1-监控游戏" aria-hidden="true">#</a> 16.1 外挂开发 1：监控游戏</h3><p>外挂的本质：</p><ol><li>修改内存的数据</li><li>修改内存的代码</li><li>修改中间层（网络、API、内核……）的数据</li></ol><p>外挂分类：</p><ol><li>无检测单机游戏外挂 <ul><li>如红警、侠盗飞车、植物大战僵尸等</li><li>修改内存或本地文件比较简单，容易获取权限</li></ul></li><li>脚本类 <ul><li>重复进行某个操作，或有逻辑地进行某个操作</li><li>技术含量低、被追踪概率低</li></ul></li><li>检测弱的网络游戏 <ul><li>可以通过更改配置、本地文件或简单抓包获得权限</li><li>一般这类游戏没有做过加密</li></ul></li><li>多手段监测的、快速更新的网络游戏 <ul><li>当今流行的多数网络游戏</li></ul></li></ol>`,23),q={class:"hint-container info"},L=n("p",{class:"hint-container-title"},"外挂开发",-1),A={href:"https://www.unknowncheats.me/forum/index.php",target:"_blank",rel:"noopener noreferrer"},D=e(`<p>使用 Spy++ 查找窗口的类和窗口标题。</p><p>子线程，在初始化时创建线程：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>BOOL <span class="token class-name">MFCApplicationDlg</span><span class="token double-colon punctuation">::</span><span class="token function">OnInitDiglog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">CreateThread</span><span class="token punctuation">(</span>
        <span class="token constant">NULL</span><span class="token punctuation">,</span>
        <span class="token constant">NULL</span><span class="token punctuation">,</span>
        monitorThreadFunc<span class="token punctuation">,</span>
        <span class="token constant">NULL</span><span class="token punctuation">,</span>
        <span class="token constant">NULL</span><span class="token punctuation">,</span>
        <span class="token constant">NULL</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
DWORD <span class="token function">monitorThreadFunc</span><span class="token punctuation">(</span>LPVOID lpThreadParameter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        HWND handle <span class="token operator">=</span> <span class="token function">FindWindow</span><span class="token punctuation">(</span><span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">&quot;类名&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">CString</span><span class="token punctuation">(</span><span class="token string">&quot;标题&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>handle <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bn<span class="token punctuation">.</span><span class="token function">SetCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            bn<span class="token punctuation">.</span><span class="token function">EnableWindow</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            bn<span class="token punctuation">.</span><span class="token function">EnableWindow</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加线程句柄变量到头文件：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>HANDLE m_monitorThread<span class="token punctuation">;</span>
</code></pre></div><h3 id="_16-2-外挂开发-2-秒杀僵尸" tabindex="-1"><a class="header-anchor" href="#_16-2-外挂开发-2-秒杀僵尸" aria-hidden="true">#</a> 16.2 外挂开发 2：秒杀僵尸</h3><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token class-name">MFCApplicationDlg</span><span class="token double-colon punctuation">::</span><span class="token function">OnBtClickedDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>bn<span class="token punctuation">.</span><span class="token function">GetCheck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用 OpenProcess() 打开进程句柄</span>
        <span class="token comment">// 写入秒杀代码</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 写入不秒杀的代码</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol><li>使用窗口类名和标题获取窗口句柄</li><li>由窗口句柄获得进程 <code>id</code></li><li>由进程 <code>id</code> 获得进程句柄</li><li>使用 <code>WriteMemory()</code> 写入数据</li></ol><h3 id="_16-3-外挂开发-3-阳光地址分析" tabindex="-1"><a class="header-anchor" href="#_16-3-外挂开发-3-阳光地址分析" aria-hidden="true">#</a> 16.3 外挂开发 3：阳光地址分析</h3><p>阳光地址发生变化，说明阳光变量的地址不是全局变量。</p><p>可能是在堆区或栈区，需要找相对地址。</p><h3 id="_16-4-外挂开发-4-模拟阳光" tabindex="-1"><a class="header-anchor" href="#_16-4-外挂开发-4-模拟阳光" aria-hidden="true">#</a> 16.4 外挂开发 4：模拟阳光</h3><ol><li>通过全局变量找到其他变量的指针</li><li>通过指针找到其他的变量</li><li>修改这个变量</li></ol><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// 全局变量</span>
<span class="token keyword">struct</span> <span class="token class-name">GameData</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    Sun <span class="token operator">*</span>sun<span class="token punctuation">;</span>
<span class="token punctuation">}</span> g_data<span class="token punctuation">;</span>
<span class="token comment">// 局部变量</span>
<span class="token keyword">struct</span> <span class="token class-name">Sun</span> <span class="token punctuation">{</span>
    <span class="token comment">// ...</span>
    <span class="token keyword">int</span> val<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token operator">*</span>sun<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_16-5-外挂开发-5-无限阳光" tabindex="-1"><a class="header-anchor" href="#_16-5-外挂开发-5-无限阳光" aria-hidden="true">#</a> 16.5 外挂开发 5：无限阳光</h3><p>地址偏移链</p><ol><li><code>0x6a9ec0</code></li><li><code>0x320</code></li><li><code>0x8</code></li><li><code>0x0</code></li><li><code>0x8</code></li><li><code>0x144</code></li><li><code>0x2c</code></li><li><code>0x5560</code></li></ol><p>写入 <code>(unsigned int)(-1)</code> 即可，即 <code>4294967295</code> 相当于 Java <code>Integer.MAX_VALUE</code></p><p>外挂的其他功能类似，可以按照地址偏移的方法查找。</p>`,19);function I(S,M){const p=c("router-link"),o=c("Mermaid"),l=c("ExternalLinkIcon");return u(),r("div",null,[h,_,n("nav",w,[n("ul",null,[n("li",null,[s(p,{to:"#_9-面向对象-d"},{default:t(()=>[a("9. 面向对象 D")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#_9-1-多态-8-虚析构函数"},{default:t(()=>[a("9.1 多态 8：虚析构函数")]),_:1})]),n("li",null,[s(p,{to:"#_9-2-多态-9-纯虚函数、抽象类"},{default:t(()=>[a("9.2 多态 9：纯虚函数、抽象类")]),_:1})]),n("li",null,[s(p,{to:"#_9-3-多继承-1"},{default:t(()=>[a("9.3 多继承 1")]),_:1})]),n("li",null,[s(p,{to:"#_9-4-多继承-2-菱形继承"},{default:t(()=>[a("9.4 多继承 2：菱形继承")]),_:1})]),n("li",null,[s(p,{to:"#_9-5-多继承-3-虚继承"},{default:t(()=>[a("9.5 多继承 3：虚继承")]),_:1})]),n("li",null,[s(p,{to:"#_9-6-多继承-4-应用"},{default:t(()=>[a("9.6 多继承 4：应用")]),_:1})]),n("li",null,[s(p,{to:"#_9-7-static-1-成员变量"},{default:t(()=>[a("9.7 static 1：成员变量")]),_:1})]),n("li",null,[s(p,{to:"#_9-8-static-2-成员函数"},{default:t(()=>[a("9.8 static 2：成员函数")]),_:1})]),n("li",null,[s(p,{to:"#_9-9-static-3-汇编分析"},{default:t(()=>[a("9.9 static 3：汇编分析")]),_:1})]),n("li",null,[s(p,{to:"#_9-10-static-4-应用"},{default:t(()=>[a("9.10 static 4：应用")]),_:1})])])]),n("li",null,[s(p,{to:"#_10-面向对象-e"},{default:t(()=>[a("10. 面向对象 E")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#_10-1-static-5-单例模式"},{default:t(()=>[a("10.1 static 5：单例模式")]),_:1})]),n("li",null,[s(p,{to:"#_10-2-new、delete-的误区"},{default:t(()=>[a("10.2 new、delete 的误区")]),_:1})]),n("li",null,[s(p,{to:"#_10-3-const-成员、引用成员"},{default:t(()=>[a("10.3 const 成员、引用成员")]),_:1})]),n("li",null,[s(p,{to:"#_10-4-拷贝构造-1"},{default:t(()=>[a("10.4 拷贝构造 1")]),_:1})]),n("li",null,[s(p,{to:"#_10-5-拷贝构造-2-父类"},{default:t(()=>[a("10.5 拷贝构造 2：父类")]),_:1})]),n("li",null,[s(p,{to:"#_10-6-拷贝构造-3-注意点"},{default:t(()=>[a("10.6 拷贝构造 3：注意点")]),_:1})]),n("li",null,[s(p,{to:"#_10-7-拷贝构造-4-疑点"},{default:t(()=>[a("10.7 拷贝构造 4：疑点")]),_:1})]),n("li",null,[s(p,{to:"#_10-8-拷贝构造-5-浅拷贝"},{default:t(()=>[a("10.8 拷贝构造 5：浅拷贝")]),_:1})]),n("li",null,[s(p,{to:"#_10-9-拷贝构造-6-深拷贝-1"},{default:t(()=>[a("10.9 拷贝构造 6：深拷贝 1")]),_:1})]),n("li",null,[s(p,{to:"#_10-10-拷贝构造-7-深拷贝-2"},{default:t(()=>[a("10.10 拷贝构造 7：深拷贝 2")]),_:1})])])]),n("li",null,[s(p,{to:"#_11-面向对象-f"},{default:t(()=>[a("11. 面向对象 F")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#_11-1-拷贝构造-8-总结"},{default:t(()=>[a("11.1 拷贝构造 8：总结")]),_:1})]),n("li",null,[s(p,{to:"#_11-2-对象类型的参数和返回值"},{default:t(()=>[a("11.2 对象类型的参数和返回值")]),_:1})]),n("li",null,[s(p,{to:"#_11-3-匿名对象-临时对象"},{default:t(()=>[a("11.3 匿名对象（临时对象）")]),_:1})]),n("li",null,[s(p,{to:"#_11-4-隐式构造、explicit"},{default:t(()=>[a("11.4 隐式构造、explicit")]),_:1})]),n("li",null,[s(p,{to:"#_11-5-编译器自动生成的构造函数"},{default:t(()=>[a("11.5 编译器自动生成的构造函数")]),_:1})]),n("li",null,[s(p,{to:"#_11-6-友元"},{default:t(()=>[a("11.6 友元")]),_:1})]),n("li",null,[s(p,{to:"#_11-7-内部类"},{default:t(()=>[a("11.7 内部类")]),_:1})]),n("li",null,[s(p,{to:"#_11-8-局部类"},{default:t(()=>[a("11.8 局部类")]),_:1})])])]),n("li",null,[s(p,{to:"#_12-其他语法-a"},{default:t(()=>[a("12. 其他语法 A")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#_12-1-运算符重载-1"},{default:t(()=>[a("12.1 运算符重载 1")]),_:1})]),n("li",null,[s(p,{to:"#_12-2-运算符重载-2-完善"},{default:t(()=>[a("12.2 运算符重载 2：完善")]),_:1})]),n("li",null,[s(p,{to:"#_12-3-运算符重载-3-更多运算符"},{default:t(()=>[a("12.3 运算符重载 3：更多运算符")]),_:1})]),n("li",null,[s(p,{to:"#_12-4-运算符重载-4-单目运算符"},{default:t(()=>[a("12.4 运算符重载 4：单目运算符")]),_:1})]),n("li",null,[s(p,{to:"#_12-5-运算符重载-5-输出"},{default:t(()=>[a("12.5 运算符重载 5：输出")]),_:1})]),n("li",null,[s(p,{to:"#_12-6-运算符重载-6-输入"},{default:t(()=>[a("12.6 运算符重载 6：输入")]),_:1})]),n("li",null,[s(p,{to:"#_12-7-运算符重载-7-单例模式完善"},{default:t(()=>[a("12.7 运算符重载 7：单例模式完善")]),_:1})]),n("li",null,[s(p,{to:"#_12-8-运算符重载-8-父类"},{default:t(()=>[a("12.8 运算符重载 8：父类")]),_:1})]),n("li",null,[s(p,{to:"#_12-9-运算符重载-9-仿函数-函数对象"},{default:t(()=>[a("12.9 运算符重载 9：仿函数（函数对象）")]),_:1})]),n("li",null,[s(p,{to:"#_12-10-模板-1"},{default:t(()=>[a("12.10 模板 1")]),_:1})])])]),n("li",null,[s(p,{to:"#_13-其他语法-b"},{default:t(()=>[a("13. 其他语法 B")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#_13-1-模板-2-编译细节"},{default:t(()=>[a("13.1 模板 2：编译细节")]),_:1})]),n("li",null,[s(p,{to:"#_13-2-模板-3-动态数组"},{default:t(()=>[a("13.2 模板 3：动态数组")]),_:1})]),n("li",null,[s(p,{to:"#_13-3-模板-4-类模板"},{default:t(()=>[a("13.3 模板 4：类模板")]),_:1})]),n("li",null,[s(p,{to:"#_13-4-模板-5-动态数组的删除和插入"},{default:t(()=>[a("13.4 模板 5：动态数组的删除和插入")]),_:1})]),n("li",null,[s(p,{to:"#_13-5-类型转换-1-const-cast"},{default:t(()=>[a("13.5 类型转换 1：const_cast")]),_:1})]),n("li",null,[s(p,{to:"#_13-6-类型转换-2-dynamic-cast"},{default:t(()=>[a("13.6 类型转换 2：dynamic_cast")]),_:1})]),n("li",null,[s(p,{to:"#_13-7-类型转换-3-static-cast"},{default:t(()=>[a("13.7 类型转换 3：static_cast")]),_:1})]),n("li",null,[s(p,{to:"#_13-8-类型转换-4-reinterpret-cast"},{default:t(()=>[a("13.8 类型转换 4：reinterpret_cast")]),_:1})]),n("li",null,[s(p,{to:"#_13-9-c-11"},{default:t(()=>[a("13.9 C++11")]),_:1})]),n("li",null,[s(p,{to:"#_13-10-lambda-1"},{default:t(()=>[a("13.10 Lambda 1")]),_:1})])])]),n("li",null,[s(p,{to:"#_14-其他语法-c"},{default:t(()=>[a("14. 其他语法 C")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#_14-1-lambda-2-变量捕获"},{default:t(()=>[a("14.1 Lambda 2：变量捕获")]),_:1})]),n("li",null,[s(p,{to:"#_14-2-c-14、c-17"},{default:t(()=>[a("14.2 C++14、C++17")]),_:1})]),n("li",null,[s(p,{to:"#_14-3-异常-1-捕捉"},{default:t(()=>[a("14.3 异常 1：捕捉")]),_:1})]),n("li",null,[s(p,{to:"#_14-4-异常-2-抛出"},{default:t(()=>[a("14.4 异常 2：抛出")]),_:1})]),n("li",null,[s(p,{to:"#_14-5-异常-3-自定义"},{default:t(()=>[a("14.5 异常 3：自定义")]),_:1})]),n("li",null,[s(p,{to:"#_14-6-智能指针-1-auto-ptr"},{default:t(()=>[a("14.6 智能指针 1：auto_ptr")]),_:1})]),n("li",null,[s(p,{to:"#_14-7-智能指针-2-自实现"},{default:t(()=>[a("14.7 智能指针 2：自实现")]),_:1})]),n("li",null,[s(p,{to:"#_14-8-智能指针-3-shared-ptr"},{default:t(()=>[a("14.8 智能指针 3：shared_ptr")]),_:1})]),n("li",null,[s(p,{to:"#_14-9-智能指针-4-循环引用、weak-ptr"},{default:t(()=>[a("14.9 智能指针 4：循环引用、weak_ptr")]),_:1})]),n("li",null,[s(p,{to:"#_14-10-智能指针-5-unique-ptr"},{default:t(()=>[a("14.10 智能指针 5：unique_ptr")]),_:1})])])]),n("li",null,[s(p,{to:"#_15-项目实战"},{default:t(()=>[a("15. 项目实战")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#_15-1-mfc-1-图标"},{default:t(()=>[a("15.1 MFC 1：图标")]),_:1})]),n("li",null,[s(p,{to:"#_15-2-mfc-2-按钮"},{default:t(()=>[a("15.2 MFC 2：按钮")]),_:1})]),n("li",null,[s(p,{to:"#_15-3-mfc-3-调试"},{default:t(()=>[a("15.3 MFC 3：调试")]),_:1})]),n("li",null,[s(p,{to:"#_15-4-mfc-4-打开网页"},{default:t(()=>[a("15.4 MFC 4：打开网页")]),_:1})]),n("li",null,[s(p,{to:"#_15-5-mfc-5-checkbox"},{default:t(()=>[a("15.5 MFC 5：checkbox")]),_:1})]),n("li",null,[s(p,{to:"#_15-6-软件破解-1-文件格式"},{default:t(()=>[a("15.6 软件破解 1：文件格式")]),_:1})]),n("li",null,[s(p,{to:"#_15-7-软件破解-2-od"},{default:t(()=>[a("15.7 软件破解 2：OD")]),_:1})]),n("li",null,[s(p,{to:"#_15-8-软件破解-3-暴力破解"},{default:t(()=>[a("15.8 软件破解 3：暴力破解")]),_:1})]),n("li",null,[s(p,{to:"#_15-9-软件破解-4-ce"},{default:t(()=>[a("15.9 软件破解 4：CE")]),_:1})]),n("li",null,[s(p,{to:"#_15-10-软件破解-5-秒杀僵尸"},{default:t(()=>[a("15.10 软件破解 5：秒杀僵尸")]),_:1})])])]),n("li",null,[s(p,{to:"#_16-项目实战-b"},{default:t(()=>[a("16. 项目实战 B")]),_:1}),n("ul",null,[n("li",null,[s(p,{to:"#_16-1-外挂开发-1-监控游戏"},{default:t(()=>[a("16.1 外挂开发 1：监控游戏")]),_:1})]),n("li",null,[s(p,{to:"#_16-2-外挂开发-2-秒杀僵尸"},{default:t(()=>[a("16.2 外挂开发 2：秒杀僵尸")]),_:1})]),n("li",null,[s(p,{to:"#_16-3-外挂开发-3-阳光地址分析"},{default:t(()=>[a("16.3 外挂开发 3：阳光地址分析")]),_:1})]),n("li",null,[s(p,{to:"#_16-4-外挂开发-4-模拟阳光"},{default:t(()=>[a("16.4 外挂开发 4：模拟阳光")]),_:1})]),n("li",null,[s(p,{to:"#_16-5-外挂开发-5-无限阳光"},{default:t(()=>[a("16.5 外挂开发 5：无限阳光")]),_:1})])])])])]),f,s(o,{id:"mermaid-64",code:"eJxLL0osyFAIceJSAAJHDQ1HTU0FXV07BScNDScgU03BWUPDWVMTLO0E4oJlIzQ0IoCCAIsFC6w="}),x,s(o,{id:"mermaid-1494",code:"eJxVjjEOwyAMRfecgqlbLpChJ+jUCyAXHGKJ2JEDaXv7Rk1TgI2n7/9fUFgmc7t3Zn9r8sOAL4dLImHT99eCH+AtxCjOXApwsKb6n94Lkq9JafvBKIGcHYFiVjyhZk40o0VV0bLZZnedA3uZgfgInw3EG0TaFTXkGflvFZFDmtqs5GRltAocsIw1DmVMNtQxyrOt+N62KLOvk90HGNF3tQ=="}),C,s(o,{id:"mermaid-2293",code:"eJxLL0osyFAIceJSAILUitRoJSCh8HxF99Nd/UqxCrq6Ci/27n3auvRpW+vTtTOAfDuQquT8FBSVz2e1PJuz6+nMFc8XNCrFwswCqQKZ8LSj7dm8CWC9zxdsebF8MVhw/Z6n7bvAgi8WrYaIA42BmMcFALHfR1g="}),P,n("div",q,[L,n("p",null,[a("大多数游戏外挂用虚假封包或向游戏服务器提交假参数从而改变游戏中的人物能力或道具设定，你可以在 "),n("a",A,[a("unknowncheats"),s(l)]),a(" 这个网站上找到关于当前外挂发展的信息。")])]),D])}const N=i(g,[["render",I],["__file","index.html.vue"]]);export{N as default};

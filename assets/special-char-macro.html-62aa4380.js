import{_ as e,M as o,p as c,q as l,R as n,N as t,V as p,t as s,a1 as i}from"./framework-5f7e94ef.js";const u={},r=n("h1",{id:"c-特殊字符标记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-特殊字符标记","aria-hidden":"true"},"#"),s(" C++ 特殊字符标记")],-1),d={class:"table-of-contents"},k=i(`<h2 id="_1-unicode-字符" tabindex="-1"><a class="header-anchor" href="#_1-unicode-字符" aria-hidden="true">#</a> 1. Unicode 字符</h2><p>C++ 11 在 Unicode 方面的支持：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token comment">// utf-8</span>
<span class="token keyword">char</span> u8_array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> u8<span class="token string">&quot;你好，世界&quot;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>string u8_str <span class="token operator">=</span> u8<span class="token string">&quot;你好，世界&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// utf-16</span>
<span class="token keyword">char16_t</span> u16_c <span class="token operator">=</span> u<span class="token char">&#39;中&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char16_t</span> u16_array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> u<span class="token string">&quot;你好，世界&quot;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>u16string u16_str <span class="token operator">=</span> u<span class="token string">&quot;你好，世界&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// ucs4</span>
<span class="token keyword">char32_t</span> u32_c <span class="token operator">=</span> U<span class="token char">&#39;𪚥&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">char32_t</span> u32_array<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> U<span class="token string">&quot;你好，世界&quot;</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>u32string u32_str <span class="token operator">=</span> U<span class="token string">&quot;你好，世界&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-宽字符" tabindex="-1"><a class="header-anchor" href="#_2-宽字符" aria-hidden="true">#</a> 2. 宽字符</h2><p>字符串前加上 <code>L</code>，则是不管编码环境是什么，都是将其后面的字符串都将以 Unicode 方式保存，相当于宽字符。</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">wchar_t</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> L<span class="token string">&quot;123abc&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>宽字符串不能直接输出，可以使用 <code>std::wcout</code> 进行输出。在 Windows 建议使用宽字符操作路径等信息，避免乱码。</p><h2 id="_3-自然字符串" tabindex="-1"><a class="header-anchor" href="#_3-自然字符串" aria-hidden="true">#</a> 3. 自然字符串</h2><p><code>R&quot;( ... )&quot;</code> 会完全保留其中的内容，不进行转义。</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>string json <span class="token operator">=</span> <span class="token raw-string string">R&quot;(
{
    &quot;error&quot;: {
        &quot;code&quot;: 101,
        &quot;message&quot;: &quot;operation failed!&quot;
    },
    &quot;result&quot;: false
}
)&quot;</span><span class="token punctuation">;</span>
</code></pre></div><p>原始字符串的定义形式为：<code>R&quot;xxx(raw_string_text)xxx&quot;</code>，其中括号的前后可以加任意其它相同的字符，所加的字符串会被编译器忽略。</p><h2 id="_4-宏标记" tabindex="-1"><a class="header-anchor" href="#_4-宏标记" aria-hidden="true">#</a> 4. 宏标记 <code>#</code> / <code>#@</code> / <code>##</code></h2><div class="hint-container tip"><p class="hint-container-title">多行的宏</p><p>使用 <code>\\</code> 可以定义多行宏。</p></div><h3 id="_4-1-字符串化" tabindex="-1"><a class="header-anchor" href="#_4-1-字符串化" aria-hidden="true">#</a> 4.1 字符串化：<code>#</code></h3><p>一个 <code>#</code> 代表字符串化，将所标记的内容转换为字面字符串，例如</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> #x</span></span>
</code></pre></div><p>下面的代码输出 <code>&quot;你好&quot;</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> #x</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">S</span><span class="token punctuation">(</span>你好<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_4-2-字符化" tabindex="-1"><a class="header-anchor" href="#_4-2-字符化" aria-hidden="true">#</a> 4.2 字符化：<code>#@</code></h3><p><code>#@</code> 表示字符化，即用单引号包括：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> #@x</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token function">S</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="_4-3-连接" tabindex="-1"><a class="header-anchor" href="#_4-3-连接" aria-hidden="true">#</a> 4.3 连接：<code>##</code></h3><p>两个 <code>##</code> 代表连接，例如：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ab</span><span class="token punctuation">##</span><span class="token expression">x</span></span>
</code></pre></div><p>下面的代码可以输出 <code>1</code>：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> ab</span><span class="token punctuation">##</span><span class="token expression">x</span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> abc <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">S</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token comment">// &quot;1&quot;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>一个综合示例：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">S</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> L</span><span class="token punctuation">##</span><span class="token expression">x</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">OUTPUT</span><span class="token expression"><span class="token punctuation">(</span>x<span class="token punctuation">)</span> std<span class="token double-colon punctuation">::</span>wcout <span class="token operator">&lt;&lt;</span> #x <span class="token operator">&lt;&lt;</span> </span><span class="token string">&quot;: &quot;</span> <span class="token expression"><span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">wchar_t</span> s<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">S</span><span class="token punctuation">(</span><span class="token string">&quot;123abc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">OUTPUT</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token comment">// &quot;s: 123abc&quot;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,28);function v(h,m){const a=o("router-link");return c(),l("div",null,[r,n("nav",d,[n("ul",null,[n("li",null,[t(a,{to:"#_1-unicode-字符"},{default:p(()=>[s("1. Unicode 字符")]),_:1})]),n("li",null,[t(a,{to:"#_2-宽字符"},{default:p(()=>[s("2. 宽字符")]),_:1})]),n("li",null,[t(a,{to:"#_3-自然字符串"},{default:p(()=>[s("3. 自然字符串")]),_:1})]),n("li",null,[t(a,{to:"#_4-宏标记"},{default:p(()=>[s("4. 宏标记 # / #@ / ##")]),_:1}),n("ul",null,[n("li",null,[t(a,{to:"#_4-1-字符串化"},{default:p(()=>[s("4.1 字符串化：#")]),_:1})]),n("li",null,[t(a,{to:"#_4-2-字符化"},{default:p(()=>[s("4.2 字符化：#@")]),_:1})]),n("li",null,[t(a,{to:"#_4-3-连接"},{default:p(()=>[s("4.3 连接：##")]),_:1})])])])])]),k])}const g=e(u,[["render",v],["__file","special-char-macro.html.vue"]]);export{g as default};

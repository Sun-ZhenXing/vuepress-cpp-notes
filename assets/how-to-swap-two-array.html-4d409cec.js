import{_ as r,M as c,p as d,q as _,R as n,N as a,V as t,t as s,a1 as k}from"./framework-8980b429.js";const w={},h=n("h1",{id:"c-如何使用-swap-交换数组",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-如何使用-swap-交换数组","aria-hidden":"true"},"#"),s(" C++ 如何使用 swap 交换数组")],-1),f={class:"table-of-contents"},m=k('<h2 id="_1-c-std-swap" tabindex="-1"><a class="header-anchor" href="#_1-c-std-swap" aria-hidden="true">#</a> 1. C++ <code>std::swap</code></h2><div class="hint-container tip"><p class="hint-container-title">头文件</p><p>在 C++ 98 <code>std::swap</code> 被定义在 <code>&lt;algorithm&gt;</code> 中，而 C++ 11 则定义在 <code>&lt;utility&gt;</code> 中。</p></div><p>之前在使用 <code>std::swap</code> 交换数组，但是 C++ 的数组变量是不能被重新定义的，那么 <code>std::swap</code> 是如何交换这两个数组的呢？</p><p>在 CPlusPlus 网站上，<code>std::swap</code> 的声明如下：<sup class="footnote-ref"><a href="#footnote1">[1]</a><a class="footnote-anchor" id="footnote-ref1"></a></sup></p>',4),b=n("div",{class:"language-cpp","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// C++ 98 in <algorithm>"),s(`
`),n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"swap"),s(),n("span",{class:"token punctuation"},"("),s("T"),n("span",{class:"token operator"},"&"),s(" a"),n("span",{class:"token punctuation"},","),s(" T"),n("span",{class:"token operator"},"&"),s(" b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])])],-1),v=n("div",{class:"language-cpp","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token comment"},"// C++ 11 in <utility>"),s(`
`),n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"swap"),s(),n("span",{class:"token punctuation"},"("),s("T"),n("span",{class:"token operator"},"&"),s(" a"),n("span",{class:"token punctuation"},","),s(" T"),n("span",{class:"token operator"},"&"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"noexcept"),s(),n("span",{class:"token punctuation"},"("),s("is_nothrow_move_constructible"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token double-colon punctuation"},"::"),s("value "),n("span",{class:"token operator"},"&&"),s(" is_nothrow_move_assignable"),n("span",{class:"token operator"},"<"),s("T"),n("span",{class:"token operator"},">"),n("span",{class:"token double-colon punctuation"},"::"),s("value"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`

`),n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" size_t N"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"T"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token function"},"T"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"&"),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token keyword"},"noexcept"),s(),n("span",{class:"token punctuation"},"("),n("span",{class:"token keyword"},"noexcept"),n("span",{class:"token punctuation"},"("),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),n("span",{class:"token operator"},"*"),s("a"),n("span",{class:"token punctuation"},","),s(),n("span",{class:"token operator"},"*"),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`)])])],-1),y=n("p",null,"其等价实现如下：",-1),g=n("div",{class:"language-cpp","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("T"),n("span",{class:"token operator"},"&"),s(" a"),n("span",{class:"token punctuation"},","),s(" T"),n("span",{class:"token operator"},"&"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  T `),n("span",{class:"token function"},"c"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  a `),n("span",{class:"token operator"},"="),s(" b"),n("span",{class:"token punctuation"},";"),s(`
  b `),n("span",{class:"token operator"},"="),s(" c"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),T=n("div",{class:"language-cpp","data-ext":"cpp"},[n("pre",{class:"language-cpp"},[n("code",null,[n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("T"),n("span",{class:"token operator"},"&"),s(" a"),n("span",{class:"token punctuation"},","),s(" T"),n("span",{class:"token operator"},"&"),s(" b"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  T `),n("span",{class:"token function"},"c"),n("span",{class:"token punctuation"},"("),s("std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"move"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  a `),n("span",{class:"token operator"},"="),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"move"),n("span",{class:"token punctuation"},"("),s("b"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
  b `),n("span",{class:"token operator"},"="),s(" std"),n("span",{class:"token double-colon punctuation"},"::"),n("span",{class:"token function"},"move"),n("span",{class:"token punctuation"},"("),s("c"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`),n("span",{class:"token keyword"},"template"),s(),n("span",{class:"token operator"},"<"),n("span",{class:"token keyword"},"class"),s(),n("span",{class:"token class-name"},"T"),n("span",{class:"token punctuation"},","),s(" size_t N"),n("span",{class:"token operator"},">"),s(),n("span",{class:"token keyword"},"void"),s(),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("T "),n("span",{class:"token operator"},"&"),s("a"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" T "),n("span",{class:"token operator"},"&"),s("b"),n("span",{class:"token punctuation"},"["),s("N"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),s(),n("span",{class:"token punctuation"},"{"),s(`
  `),n("span",{class:"token keyword"},"for"),s(),n("span",{class:"token punctuation"},"("),s("size_t i "),n("span",{class:"token operator"},"="),s(),n("span",{class:"token number"},"0"),n("span",{class:"token punctuation"},";"),s(" i "),n("span",{class:"token operator"},"<"),s(" N"),n("span",{class:"token punctuation"},";"),s(),n("span",{class:"token operator"},"++"),s("i"),n("span",{class:"token punctuation"},")"),s(`
    `),n("span",{class:"token function"},"swap"),n("span",{class:"token punctuation"},"("),s("a"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},","),s(" b"),n("span",{class:"token punctuation"},"["),s("i"),n("span",{class:"token punctuation"},"]"),n("span",{class:"token punctuation"},")"),n("span",{class:"token punctuation"},";"),s(`
`),n("span",{class:"token punctuation"},"}"),s(`
`)])])],-1),C=k(`<h2 id="_2-一些思考" tabindex="-1"><a class="header-anchor" href="#_2-一些思考" aria-hidden="true">#</a> 2. 一些思考</h2><p>也就是说，C++ 11 后的 <code>std::swap</code> 交换数组实际上是在交换每一个元素，而不改变数组的指针。而且数组长度必须一致，这是符合 C++ 规范的，因为在运行状态下改变数组的指针将改变数组的属性，编译器无法确定数组的状态。</p><div class="hint-container info"><p class="hint-container-title">结论</p><p>最好不要对数组变量进行任何操作，复制和交换数组也是一个低效操作，也避免使用 <code>std::swap</code> 交换数组。</p></div><p>为了交换数组，可以使用两个指针保存数组的位置，然后直接使用指针来代表数组。</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span><span class="token operator">*</span> a1 <span class="token operator">=</span> a<span class="token punctuation">;</span>
    <span class="token keyword">int</span><span class="token operator">*</span> b1 <span class="token operator">=</span> b<span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 下面直接使用 a1[i]，b1[i]</span>
<span class="token punctuation">}</span>
</code></pre></div><hr class="footnotes-sep">`,6),x={class:"footnotes"},N={class:"footnotes-list"},A={id:"footnote1",class:"footnote-item"},V=n("code",null,"swap",-1),z={href:"http://cplusplus.com",target:"_blank",rel:"noopener noreferrer"},B={href:"https://cplusplus.com/reference/algorithm/swap/",target:"_blank",rel:"noopener noreferrer"},E=n("a",{href:"#footnote-ref1",class:"footnote-backref"},"↩︎",-1);function I(L,P){const l=c("router-link"),u=c("CodeTabs"),i=c("ExternalLinkIcon");return d(),_("div",null,[h,n("nav",f,[n("ul",null,[n("li",null,[a(l,{to:"#_1-c-std-swap"},{default:t(()=>[s("1. C++ std::swap")]),_:1})]),n("li",null,[a(l,{to:"#_2-一些思考"},{default:t(()=>[s("2. 一些思考")]),_:1})])])]),m,a(u,{id:"20",data:[{title:"C++ 98"},{title:"C++ 11"}],"tab-id":"cpp"},{tab0:t(({title:o,value:e,isActive:p})=>[b]),tab1:t(({title:o,value:e,isActive:p})=>[v]),_:1}),y,a(u,{id:"31",data:[{title:"C++ 98"},{title:"C++ 11"}],"tab-id":"cpp"},{tab0:t(({title:o,value:e,isActive:p})=>[g]),tab1:t(({title:o,value:e,isActive:p})=>[T]),_:1}),C,n("section",x,[n("ol",N,[n("li",A,[n("p",null,[V,s("，"),n("a",z,[s("cplusplus.com"),a(i)]),s("，"),n("a",B,[s("https://cplusplus.com/reference/algorithm/swap/"),a(i)]),s(),E])])])])])}const q=r(w,[["render",I],["__file","how-to-swap-two-array.html.vue"]]);export{q as default};

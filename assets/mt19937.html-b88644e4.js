import{_ as e,M as p,p as c,q as l,R as n,N as t,V as o,t as s,a1 as i}from"./framework-8980b429.js";const u={},d=n("h1",{id:"mt19937-伪随机数生成器",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#mt19937-伪随机数生成器","aria-hidden":"true"},"#"),s(" mt19937 伪随机数生成器")],-1),r={class:"table-of-contents"},k=n("h2",{id:"_1-算法简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-算法简介","aria-hidden":"true"},"#"),s(" 1. 算法简介")],-1),m=n("p",null,[n("code",null,"std::mt19937"),s(" 是伪随机数产生器，用于产生高性能的随机数。C++ 11 引入，返回值为 "),n("code",null,"unsigned int"),s(" 。这个伪随机数产生器基于 "),n("strong",null,"Mersenne Twister 算法"),s("，其周期可达到 "),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("msup",null,[n("mn",null,"2"),n("mn",null,"19937")]),n("mo",null,"−"),n("mn",null,"1")]),n("annotation",{encoding:"application/x-tex"},"2^{19937}-1")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.8974em","vertical-align":"-0.0833em"}}),n("span",{class:"mord"},[n("span",{class:"mord"},"2"),n("span",{class:"msupsub"},[n("span",{class:"vlist-t"},[n("span",{class:"vlist-r"},[n("span",{class:"vlist",style:{height:"0.8141em"}},[n("span",{style:{top:"-3.063em","margin-right":"0.05em"}},[n("span",{class:"pstrut",style:{height:"2.7em"}}),n("span",{class:"sizing reset-size6 size3 mtight"},[n("span",{class:"mord mtight"},[n("span",{class:"mord mtight"},"19937")])])])])])])])]),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"−"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.6444em"}}),n("span",{class:"mord"},"1")])])]),s("，其定义在 "),n("code",null,"<random>"),s(" 头文件中。")],-1),h=i(`<p><code>std::mt19937</code> 接收一个 <code>unsigned int</code> 数作为种子，定义如下：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>std<span class="token double-colon punctuation">::</span>mt19937 <span class="token function">mt_rand</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>random_device<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>mt19937 <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
std<span class="token double-colon punctuation">::</span>mt19937 <span class="token function">mt_rand</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>chrono<span class="token double-colon punctuation">::</span>system_clock<span class="token double-colon punctuation">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">time_since_epoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>其中 <code>time()</code> 是定义在 C 语言库 <code>&lt;time.h&gt;</code> 中的时间函数，返回当前秒数。</p><p><code>std::chrono::system_clock::now().time_since_epoch().count()</code> 则是返回当前的纳秒数，但最后三位数永远是零，计算机不会计算比微秒更精确的时间。</p><h2 id="_2-产生均匀的随机数" tabindex="-1"><a class="header-anchor" href="#_2-产生均匀的随机数" aria-hidden="true">#</a> 2. 产生均匀的随机数</h2><p>示例代码：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;random&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    mt19937 rng<span class="token punctuation">{</span>random_device<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    uniform_real_distribution<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span> uni<span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token function">uni</span><span class="token punctuation">(</span>rng<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_3-常见分布" tabindex="-1"><a class="header-anchor" href="#_3-常见分布" aria-hidden="true">#</a> 3. 常见分布</h2><ul><li>均匀分布 <ul><li><code>uniform_int_distribution</code></li><li><code>uniform_real_distribution</code></li></ul></li><li>正态分布 <ul><li><code>normal_distribution</code></li></ul></li><li>伯努利分布 <ul><li><code>binomial_distribution</code></li></ul></li></ul>`,9);function _(g,f){const a=p("router-link");return c(),l("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[t(a,{to:"#_1-算法简介"},{default:o(()=>[s("1. 算法简介")]),_:1})]),n("li",null,[t(a,{to:"#_2-产生均匀的随机数"},{default:o(()=>[s("2. 产生均匀的随机数")]),_:1})]),n("li",null,[t(a,{to:"#_3-常见分布"},{default:o(()=>[s("3. 常见分布")]),_:1})])])]),k,m,h])}const v=e(u,[["render",_],["__file","mt19937.html.vue"]]);export{v as default};

import{_ as c,M as e,p as l,q as i,R as n,N as a,V as p,t as s,a1 as u}from"./framework-5f7e94ef.js";const r={},k=n("h1",{id:"c-如何实现-split-字符串",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-如何实现-split-字符串","aria-hidden":"true"},"#"),s(" C++ 如何实现 split 字符串")],-1),d=n("p",null,[s("下面提供了几种实现 "),n("code",null,"split(str)"),s(" 的不同方法。")],-1),h={class:"table-of-contents"},m=u(`<h2 id="_1-c-标准库" tabindex="-1"><a class="header-anchor" href="#_1-c-标准库" aria-hidden="true">#</a> 1. C 标准库</h2><p>C 的标准库 <code>&lt;string.h&gt;</code> 定义了 <code>strtok()</code> 函数，可以将字符串分割为多个字符串，其声明如下：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">strtok</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>delim<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>该函数返回被分解的第一个子字符串，如果没有可检索的字符串，则返回一个空指针。其原理是将字符串的目标位置字符更改为 <code>&#39;\\0&#39;</code>。</p><p>参数含义：</p><ul><li><code>str</code>：要被分解成一组小字符串的字符串</li><li><code>delim</code>：包含分隔符的 C 字符串</li></ul><h2 id="_2-双指针" tabindex="-1"><a class="header-anchor" href="#_2-双指针" aria-hidden="true">#</a> 2. 双指针</h2><p>直接分割字符串，最简单的方式：</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> str<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> delim<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    string<span class="token double-colon punctuation">::</span>size_type slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fast <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>delim<span class="token punctuation">)</span><span class="token punctuation">;</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> res<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> string<span class="token double-colon punctuation">::</span>npos<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>slow<span class="token punctuation">,</span> fast <span class="token operator">-</span> slow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        slow <span class="token operator">=</span> fast <span class="token operator">+</span> delim<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fast <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>delim<span class="token punctuation">,</span> slow<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-stringstream" tabindex="-1"><a class="header-anchor" href="#_3-stringstream" aria-hidden="true">#</a> 3. stringstream</h2><p>使用 <code>istringstream</code> 方法创建分割字符串方法，但分割对应目标只能是字符。</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code>vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">char</span> delimiter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> tokens<span class="token punctuation">;</span>
    string token<span class="token punctuation">;</span>
    istringstream <span class="token function">tokenStream</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getline</span><span class="token punctuation">(</span>tokenStream<span class="token punctuation">,</span> token<span class="token punctuation">,</span> delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        tokens<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tokens<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="_4-boost" tabindex="-1"><a class="header-anchor" href="#_4-boost" aria-hidden="true">#</a> 4. boost</h2><p>Boost 库提供了 <code>boost::split</code> 方法，其声明如下：</p><div class="language-cpp" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;boost/algorithm/string.hpp&gt;</span></span>

boost<span class="token double-colon punctuation">::</span><span class="token function">split</span><span class="token punctuation">(</span>
    results<span class="token punctuation">,</span>
    text<span class="token punctuation">,</span>
    <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">return</span> c <span class="token operator">==</span> <span class="token char">&#39; &#39;</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,16),_={href:"https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/",target:"_blank",rel:"noopener noreferrer"},g={href:"https://www.cnblogs.com/dfcao/p/cpp-FAQ-split.html",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.oreilly.com/library/view/c-cookbook/0596007612/ch04s07.html",target:"_blank",rel:"noopener noreferrer"};function w(b,v){const t=e("router-link"),o=e("ExternalLinkIcon");return l(),i("div",null,[k,d,n("nav",h,[n("ul",null,[n("li",null,[a(t,{to:"#_1-c-标准库"},{default:p(()=>[s("1. C 标准库")]),_:1})]),n("li",null,[a(t,{to:"#_2-双指针"},{default:p(()=>[s("2. 双指针")]),_:1})]),n("li",null,[a(t,{to:"#_3-stringstream"},{default:p(()=>[s("3. stringstream")]),_:1})]),n("li",null,[a(t,{to:"#_4-boost"},{default:p(()=>[s("4. boost")]),_:1})]),n("li",null,[a(t,{to:"#参考"},{default:p(()=>[s("参考")]),_:1})])])]),m,n("ol",null,[n("li",null,[n("a",_,[s("https://www.fluentcpp.com/2017/04/21/how-to-split-a-string-in-c/"),a(o)])]),n("li",null,[n("a",g,[s("https://www.cnblogs.com/dfcao/p/cpp-FAQ-split.html"),a(o)])]),n("li",null,[n("a",f,[s("https://www.oreilly.com/library/view/c-cookbook/0596007612/ch04s07.html"),a(o)])])])])}const x=c(r,[["render",w],["__file","how-to-split-string.html.vue"]]);export{x as default};

import{_ as n,p as s,q as a,a1 as p}from"./framework-8980b429.js";const t={},o=p(`<h1 id="c-定义分数-adt" tabindex="-1"><a class="header-anchor" href="#c-定义分数-adt" aria-hidden="true">#</a> C++ 定义分数 ADT</h1><nav class="table-of-contents"><ul></ul></nav><p>在学习数据结构时，我们常常会定义许多 <strong>抽象数据类型</strong>（Abstract Data Type，ADT），我们可以以最简单的分数来学习如何以 C++ 的风格来描述应该 ADT。</p><div class="language-cpp line-numbers-mode" data-ext="cpp"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>

<span class="token comment">// 定义简易的错误类型</span>
<span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token keyword">const</span> ZeroError <span class="token operator">=</span> <span class="token string">&quot;DevidedByZeroError&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// 最大公约数快速异或算法</span>
<span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>b <span class="token operator">^=</span> a <span class="token operator">^=</span> b <span class="token operator">^=</span> a <span class="token operator">%=</span> b<span class="token punctuation">)</span>
        <span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 有理数类</span>
<span class="token keyword">class</span> <span class="token class-name">Frac</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> m_p<span class="token punctuation">,</span> m_q<span class="token punctuation">;</span>
    <span class="token comment">// 输入和输出定义为友元</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">friend</span> std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> stream<span class="token punctuation">,</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span><span class="token punctuation">;</span>

   <span class="token keyword">public</span><span class="token operator">:</span>
    <span class="token function">Frac</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span>
        <span class="token operator">:</span> <span class="token function">m_p</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">m_q</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果分母为零报错</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_q <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> ZeroError<span class="token punctuation">;</span>
        <span class="token keyword">int</span> gcdVal <span class="token operator">=</span> <span class="token function">gcd</span><span class="token punctuation">(</span>m_p<span class="token punctuation">,</span> m_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 此处约分</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>gcdVal <span class="token operator">!=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> gcdVal <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m_p <span class="token operator">=</span> m_p <span class="token operator">/</span> gcdVal<span class="token punctuation">;</span>
            m_q <span class="token operator">=</span> m_q <span class="token operator">/</span> gcdVal<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 由最简定义得，分母不为负数</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>m_q <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            m_p <span class="token operator">=</span> <span class="token operator">-</span>m_p<span class="token punctuation">;</span>
            m_q <span class="token operator">=</span> <span class="token operator">-</span>m_q<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token operator">~</span><span class="token function">Frac</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">// 实现加减乘除</span>
    <span class="token keyword">const</span> Frac <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> Frac <span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> Frac <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> Frac <span class="token keyword">operator</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取分子</span>
    <span class="token keyword">int</span> <span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_p<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 获取分母</span>
    <span class="token keyword">int</span> <span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> m_q<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 加法实现</span>
<span class="token keyword">const</span> Frac Frac<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Frac</span><span class="token punctuation">(</span>frac<span class="token punctuation">.</span>m_p <span class="token operator">*</span> m_q <span class="token operator">+</span> m_p <span class="token operator">*</span> frac<span class="token punctuation">.</span>m_q<span class="token punctuation">,</span> frac<span class="token punctuation">.</span>m_q <span class="token operator">*</span> m_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 减法实现</span>
<span class="token keyword">const</span> Frac Frac<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">-</span><span class="token punctuation">(</span><span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Frac</span><span class="token punctuation">(</span>m_p <span class="token operator">*</span> frac<span class="token punctuation">.</span>m_q <span class="token operator">-</span> m_q <span class="token operator">*</span> frac<span class="token punctuation">.</span>m_p<span class="token punctuation">,</span> frac<span class="token punctuation">.</span>m_q <span class="token operator">*</span> m_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 乘法实现</span>
<span class="token keyword">const</span> Frac Frac<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Frac</span><span class="token punctuation">(</span>m_p <span class="token operator">*</span> frac<span class="token punctuation">.</span>m_p<span class="token punctuation">,</span> m_q <span class="token operator">*</span> frac<span class="token punctuation">.</span>m_q<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 除法实现</span>
<span class="token keyword">const</span> Frac Frac<span class="token double-colon punctuation">::</span><span class="token keyword">operator</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">Frac</span><span class="token punctuation">(</span>m_p <span class="token operator">*</span> frac<span class="token punctuation">.</span>m_q<span class="token punctuation">,</span> m_q <span class="token operator">*</span> frac<span class="token punctuation">.</span>m_p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输出实现</span>
std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>ostream<span class="token operator">&amp;</span> stream<span class="token punctuation">,</span> <span class="token keyword">const</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stream <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;F(&quot;</span> <span class="token operator">&lt;&lt;</span> frac<span class="token punctuation">.</span>m_p <span class="token operator">&lt;&lt;</span> <span class="token string">&quot; / &quot;</span> <span class="token operator">&lt;&lt;</span> frac<span class="token punctuation">.</span>m_q <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;)&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> stream<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 输入实现</span>
std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span>istream<span class="token operator">&amp;</span> stream<span class="token punctuation">,</span> Frac<span class="token operator">&amp;</span> frac<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 通过构造函数化简</span>
    <span class="token keyword">int</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span>
    stream <span class="token operator">&gt;&gt;</span> p<span class="token punctuation">;</span>
    stream <span class="token operator">&gt;&gt;</span> q<span class="token punctuation">;</span>
    <span class="token comment">// 构造一个新的临时对象以便约分、化简</span>
    Frac temp <span class="token operator">=</span> <span class="token function">Frac</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>
    frac<span class="token punctuation">.</span>m_p <span class="token operator">=</span> temp<span class="token punctuation">.</span>m_p<span class="token punctuation">;</span>
    frac<span class="token punctuation">.</span>m_q <span class="token operator">=</span> temp<span class="token punctuation">.</span>m_q<span class="token punctuation">;</span>
    <span class="token keyword">return</span> stream<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    Frac<span class="token operator">*</span> fra1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Frac</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    Frac<span class="token operator">*</span> fra2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Frac</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>fra1 <span class="token operator">+</span> <span class="token operator">*</span>fra2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>fra1 <span class="token operator">-</span> <span class="token operator">*</span>fra2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>fra1 <span class="token operator">*</span> <span class="token operator">*</span>fra2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>fra1 <span class="token operator">/</span> <span class="token operator">*</span>fra2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> fra2<span class="token operator">-&gt;</span><span class="token function">getDenominator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> fra2<span class="token operator">-&gt;</span><span class="token function">getNumerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    Frac <span class="token function">fra3</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cin <span class="token operator">&gt;&gt;</span> fra3<span class="token punctuation">;</span>
    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> fra3 <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> fra1<span class="token punctuation">;</span>
    <span class="token keyword">delete</span> fra2<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),e=[o];function c(l,u){return s(),a("div",null,e)}const r=n(t,[["render",c],["__file","define-fraction-adt.html.vue"]]);export{r as default};

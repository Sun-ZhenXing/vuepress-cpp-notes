import{_ as o,M as p,p as c,q as l,R as n,N as t,V as e,t as s,a1 as i}from"./framework-5f7e94ef.js";const u={},d=n("h1",{id:"c-语言可变参数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#c-语言可变参数","aria-hidden":"true"},"#"),s(" C 语言可变参数")],-1),r={class:"table-of-contents"},k=i(`<h2 id="_1-使用方法" tabindex="-1"><a class="header-anchor" href="#_1-使用方法" aria-hidden="true">#</a> 1. 使用方法</h2><ol><li>定义一个函数，最后一个参数为省略号，省略号前面可以设置自定义参数</li><li>在函数定义中创建一个 <code>va_list</code> 类型变量</li><li>使用可变参数前面的一个参数和 <code>va_start</code> 宏来初始化 <code>va_list</code> 变量为一个参数列表</li><li>使用 <code>va_arg</code> 宏和 <code>va_list</code> 变量来访问参数列表中的每个项</li><li>使用宏 <code>va_end</code> 来清理赋予 <code>va_list</code> 变量的内存</li></ol><p>示例代码：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdarg.h&gt;</span></span>

<span class="token keyword">double</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    va_list valist<span class="token punctuation">;</span>
    <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    <span class="token comment">/* 为 num 个参数初始化 valist */</span>
    <span class="token function">va_start</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">/* 访问所有赋给 valist 的参数 */</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        sum <span class="token operator">+=</span> <span class="token function">va_arg</span><span class="token punctuation">(</span>valist<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/* 清理为 valist 保留的内存 */</span>
    <span class="token function">va_end</span><span class="token punctuation">(</span>valist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> sum <span class="token operator">/</span> num<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;%f\\n&quot;</span><span class="token punctuation">,</span> <span class="token function">average</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如这样的输入输出语句都包含了可变参数：</p><div class="language-c" data-ext="c"><pre class="language-c"><code><span class="token keyword">int</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
<span class="token keyword">int</span> <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>format<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="_2-缺省参数提升" tabindex="-1"><a class="header-anchor" href="#_2-缺省参数提升" aria-hidden="true">#</a> 2. 缺省参数提升</h2><p>注意，<code>va_arg(ap, type)</code> 宏中的 <code>type</code> 不能是</p><ul><li><code>char</code></li><li><code>short</code></li><li><code>float</code></li></ul><p>否则将产生 <strong>缺省参数提升</strong>（Default Argument Promotions）</p><ul><li><code>float</code> 类型的参数提升为 <code>double</code> 类型</li><li><code>char</code>、<code>short</code> 和相应的 <code>signed</code>、<code>unsigned</code> 类型参数提升为 <code>int</code> 类型</li><li>若 <code>int</code> 类型不能容纳原值，则提升为 <code>unsigned int</code> 类型</li></ul><h2 id="_3-参数个数判断" tabindex="-1"><a class="header-anchor" href="#_3-参数个数判断" aria-hidden="true">#</a> 3. 参数个数判断</h2><p>变参宏无法智能识别可变参数的数目和类型，因此实现变参函数时需自行判断可变参数的数目和类型。所以我们就要想一些办法，比如：</p><ol><li>显式提供变参数目或设定遍历结束条件</li><li>显式提供变参类型枚举值，或在固定参数中包含足够的类型信息（如 <code>printf()</code> 函数通过分析 <code>format()</code> 字符串即可确定各变参类型）</li><li>主调函数和被调函数可约定变参的数目和类型</li></ol>`,14);function v(m,b){const a=p("router-link");return c(),l("div",null,[d,n("nav",r,[n("ul",null,[n("li",null,[t(a,{to:"#_1-使用方法"},{default:e(()=>[s("1. 使用方法")]),_:1})]),n("li",null,[t(a,{to:"#_2-缺省参数提升"},{default:e(()=>[s("2. 缺省参数提升")]),_:1})]),n("li",null,[t(a,{to:"#_3-参数个数判断"},{default:e(()=>[s("3. 参数个数判断")]),_:1})])])]),k])}const h=o(u,[["render",v],["__file","c-variable-arguments.html.vue"]]);export{h as default};
